# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2024-02-23 14:15+0000\n"
"Language-Team: Indonesian (https://app.transifex.com/python-doc/teams/5390/id/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: id\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/hash.rst:4
msgid "PyHash API"
msgstr ""

#: ../../c-api/hash.rst:6
msgid ""
"See also the :c:member:`PyTypeObject.tp_hash` member and :ref:`numeric-"
"hash`."
msgstr ""

#: ../../c-api/hash.rst:10
msgid "Hash value type: signed integer."
msgstr ""

#: ../../c-api/hash.rst:16
msgid "Hash value type: unsigned integer."
msgstr ""

#: ../../c-api/hash.rst:22
msgid ""
"The `Mersenne prime <https://en.wikipedia.org/wiki/Mersenne_prime>`_ ``P = "
"2**n -1``, used for numeric hash scheme."
msgstr ""

#: ../../c-api/hash.rst:28
msgid "The exponent ``n`` of ``P`` in :c:macro:`PyHASH_MODULUS`."
msgstr ""

#: ../../c-api/hash.rst:34
msgid "Prime multiplier used in string and various other hashes."
msgstr ""

#: ../../c-api/hash.rst:40
msgid "The hash value returned for a positive infinity."
msgstr ""

#: ../../c-api/hash.rst:46
msgid "The multiplier used for the imaginary part of a complex number."
msgstr ""

#: ../../c-api/hash.rst:52
msgid "Hash function definition used by :c:func:`PyHash_GetFuncDef`."
msgstr ""

#: ../../c-api/hash.rst:60
msgid "Hash function name (UTF-8 encoded string)."
msgstr ""

#: ../../c-api/hash.rst:64
msgid "Internal size of the hash value in bits."
msgstr ""

#: ../../c-api/hash.rst:68
msgid "Size of seed input in bits."
msgstr ""

#: ../../c-api/hash.rst:75
msgid "Get the hash function definition."
msgstr ""

#: ../../c-api/hash.rst:78
msgid ":pep:`456` \"Secure and interchangeable hash algorithm\"."
msgstr ""

#: ../../c-api/hash.rst:85
msgid ""
"Hash a pointer value: process the pointer value as an integer (cast it to "
"``uintptr_t`` internally). The pointer is not dereferenced."
msgstr ""

#: ../../c-api/hash.rst:88
msgid "The function cannot fail: it cannot return ``-1``."
msgstr ""

#: ../../c-api/hash.rst:95
msgid ""
"Compute and return the hash value of a buffer of *len* bytes starting at "
"address *ptr*. The hash is guaranteed to match that of :class:`bytes`, "
":class:`memoryview`, and other built-in objects that implement the "
":ref:`buffer protocol <bufferobjects>`."
msgstr ""

#: ../../c-api/hash.rst:100
msgid ""
"Use this function to implement hashing for immutable objects whose "
":c:member:`~PyTypeObject.tp_richcompare` function compares to another "
"object's buffer."
msgstr ""

#: ../../c-api/hash.rst:104
msgid "*len* must be greater than or equal to ``0``."
msgstr ""

#: ../../c-api/hash.rst:106
msgid "This function always succeeds."
msgstr ""

#: ../../c-api/hash.rst:113
msgid ""
"Generic hashing function that is meant to be put into a type object's "
"``tp_hash`` slot. Its result only depends on the object's identity."
msgstr ""

#: ../../c-api/hash.rst:118
msgid "In CPython, it is equivalent to :c:func:`Py_HashPointer`."
msgstr ""
