# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Faiq Zakki <221709674@stis.ac.id>, 2021
# oon arfiandwi (OonID) <oon.arfiandwi@gmail.com>, 2023
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-13 14:21+0000\n"
"PO-Revision-Date: 2021-06-28 01:03+0000\n"
"Last-Translator: oon arfiandwi (OonID) <oon.arfiandwi@gmail.com>, 2023\n"
"Language-Team: Indonesian (https://app.transifex.com/python-doc/teams/5390/id/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: id\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/csv.rst:2
msgid ":mod:`!csv` --- CSV File Reading and Writing"
msgstr ""

#: ../../library/csv.rst:9
msgid "**Source code:** :source:`Lib/csv.py`"
msgstr "**Kode sumber:** :source:`Lib/csv.py`"

#: ../../library/csv.rst:17
msgid ""
"The so-called CSV (Comma Separated Values) format is the most common import "
"and export format for spreadsheets and databases.  CSV format was used for "
"many years prior to attempts to describe the format in a standardized way in"
" :rfc:`4180`.  The lack of a well-defined standard means that subtle "
"differences often exist in the data produced and consumed by different "
"applications.  These differences can make it annoying to process CSV files "
"from multiple sources. Still, while the delimiters and quoting characters "
"vary, the overall format is similar enough that it is possible to write a "
"single module which can efficiently manipulate such data, hiding the details"
" of reading and writing the data from the programmer."
msgstr ""
"Format CSV (Comma Separated Values) adalah format impor dan ekspor data yang"
" paling umum digunakan untuk data spreadsheet dan database. Format CSV telah"
" digunakan selama bertahun-tahun sebelum adanya upaya untuk mendeskripsikan "
"format yang distandardisasi pada :rfc:`4180`. Kurangnya standar yang "
"terdefinisi dengan baik berarti banyak perbedaan tipis pada data yang "
"dihasilkan dan digunakan dengan penggunaan yang berbeda. Perbedaan tersebut "
"membuat tidak mudah untuk memproses file CSV dari beberapa sumber. Namun, "
"meskipun karakter pembatas dan kutipan berbeda-beda, keseluruhan formatnya "
"cukup mirip sehingga memungkinkan untuk menulis sebuah modul yang secara "
"efisien dapat memanipulasi data tersebut."

#: ../../library/csv.rst:28
msgid ""
"The :mod:`csv` module implements classes to read and write tabular data in "
"CSV format.  It allows programmers to say, \"write this data in the format "
"preferred by Excel,\" or \"read data from this file which was generated by "
"Excel,\" without knowing the precise details of the CSV format used by "
"Excel.  Programmers can also describe the CSV formats understood by other "
"applications or define their own special-purpose CSV formats."
msgstr ""
"Modul :mod:`csv` mengimplementasikan kelas-kelas untuk membaca dan menulis "
"data tabular dengan format CSV.  Hal ini memungkinkan pemrogram untuk "
"mengatakan, \"tulis data ini dalam format yang disukai oleh Excel,\" atau "
"\"baca data dari file ini yang dihasilkan oleh Excel,\" tanpa mengetahui "
"detail persis dari format CSV yang digunakan oleh Excel.  Pemrogram juga "
"bisa mendeskripsikan format CSV yang dapat dipahami oleh aplikasi lain atau "
"menentukan format CSV nya sendiri dengan tujuan tertentu."

#: ../../library/csv.rst:35
msgid ""
"The :mod:`csv` module's :class:`reader` and :class:`writer` objects read and"
" write sequences.  Programmers can also read and write data in dictionary "
"form using the :class:`DictReader` and :class:`DictWriter` classes."
msgstr ""
"Modul milik :mod:`csv`, :class:`reader` dan :class:`writer` objek membaca "
"dan menulis urutan-urutan.  Pemrogram juga bisa membaca dan menulis data "
"dalam bentuk dictionary dengan menggunakan kelas :class:`DictReader` dan "
":class:`DictWriter`."

#: ../../library/csv.rst:41
msgid ":pep:`305` - CSV File API"
msgstr ":pep:`305` - API File CSV"

#: ../../library/csv.rst:42
msgid ""
"The Python Enhancement Proposal which proposed this addition to Python."
msgstr ""
"Python Enhancement Proposal (PEP) yang mengusulkan penambahan ini ke Python."

#: ../../library/csv.rst:48
msgid "Module Contents"
msgstr "Modul-Modul"

#: ../../library/csv.rst:50
msgid "The :mod:`csv` module defines the following functions:"
msgstr "Modul :mod:`csv` memiliki fungsi-fungsi sebagai berikut:"

#: ../../library/csv.rst:58
msgid ""
"Return a :ref:`reader object <reader-objects>` that will process lines from "
"the given *csvfile*.  A csvfile must be an iterable of strings, each in the "
"reader's defined csv format. A csvfile is most commonly a file-like object "
"or list. If *csvfile* is a file object, it should be opened with "
"``newline=''``. [1]_  An optional *dialect* parameter can be given which is "
"used to define a set of parameters specific to a particular CSV dialect.  It"
" may be an instance of a subclass of the :class:`Dialect` class or one of "
"the strings returned by the :func:`list_dialects` function.  The other "
"optional *fmtparams* keyword arguments can be given to override individual "
"formatting parameters in the current dialect.  For full details about the "
"dialect and formatting parameters, see section :ref:`csv-fmt-params`."
msgstr ""

#: ../../library/csv.rst:72
msgid ""
"Each row read from the csv file is returned as a list of strings.  No "
"automatic data type conversion is performed unless the "
":data:`QUOTE_NONNUMERIC` format option is specified (in which case unquoted "
"fields are transformed into floats)."
msgstr ""

#: ../../library/csv.rst:76 ../../library/csv.rst:106
#: ../../library/csv.rst:181 ../../library/csv.rst:219
msgid "A short usage example::"
msgstr "Contoh penggunaan singkat::"

#: ../../library/csv.rst:78
msgid ""
">>> import csv\n"
">>> with open('eggs.csv', newline='') as csvfile:\n"
"...     spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')\n"
"...     for row in spamreader:\n"
"...         print(', '.join(row))\n"
"Spam, Spam, Spam, Spam, Spam, Baked Beans\n"
"Spam, Lovely Spam, Wonderful Spam"
msgstr ""

#: ../../library/csv.rst:89
msgid ""
"Return a writer object responsible for converting the user's data into "
"delimited strings on the given file-like object.  *csvfile* can be any "
"object with a :meth:`~io.TextIOBase.write` method.  If *csvfile* is a file "
"object, it should be opened with ``newline=''`` [1]_.  An optional *dialect*"
" parameter can be given which is used to define a set of parameters specific"
" to a particular CSV dialect.  It may be an instance of a subclass of the "
":class:`Dialect` class or one of the strings returned by the "
":func:`list_dialects` function.  The other optional *fmtparams* keyword "
"arguments can be given to override individual formatting parameters in the "
"current dialect.  For full details about dialects and formatting parameters,"
" see the :ref:`csv-fmt-params` section. To make it as easy as possible to "
"interface with modules which implement the DB API, the value :const:`None` "
"is written as the empty string.  While this isn't a reversible "
"transformation, it makes it easier to dump SQL NULL data values to CSV files"
" without preprocessing the data returned from a ``cursor.fetch*`` call. All "
"other non-string data are stringified with :func:`str` before being written."
msgstr ""

#: ../../library/csv.rst:108
msgid ""
"import csv\n"
"with open('eggs.csv', 'w', newline='') as csvfile:\n"
"    spamwriter = csv.writer(csvfile, delimiter=' ',\n"
"                            quotechar='|', quoting=csv.QUOTE_MINIMAL)\n"
"    spamwriter.writerow(['Spam'] * 5 + ['Baked Beans'])\n"
"    spamwriter.writerow(['Spam', 'Lovely Spam', 'Wonderful Spam'])"
msgstr ""

#: ../../library/csv.rst:118
msgid ""
"Associate *dialect* with *name*.  *name* must be a string. The dialect can "
"be specified either by passing a sub-class of :class:`Dialect`, or by "
"*fmtparams* keyword arguments, or both, with keyword arguments overriding "
"parameters of the dialect. For full details about dialects and formatting "
"parameters, see section :ref:`csv-fmt-params`."
msgstr ""

#: ../../library/csv.rst:127
msgid ""
"Delete the dialect associated with *name* from the dialect registry.  An "
":exc:`Error` is raised if *name* is not a registered dialect name."
msgstr ""

#: ../../library/csv.rst:133
msgid ""
"Return the dialect associated with *name*.  An :exc:`Error` is raised if "
"*name* is not a registered dialect name.  This function returns an immutable"
" :class:`Dialect`."
msgstr ""

#: ../../library/csv.rst:139
msgid "Return the names of all registered dialects."
msgstr "Mengembalikan nama dari semua dialek yang terdaftar."

#: ../../library/csv.rst:144
msgid ""
"Returns the current maximum field size allowed by the parser. If *new_limit*"
" is given, this becomes the new limit."
msgstr ""
"Mengembalikan nilai maksimum ukuran field yang diperbolekan saat ini oleh "
"parser. Jika  *new_limit* diberikan, hal tersebut menjadi limit baru."

#: ../../library/csv.rst:148
msgid "The :mod:`csv` module defines the following classes:"
msgstr "Modul :mod:`csv` berisi kelas-kelas dibawah ini:"

#: ../../library/csv.rst:153
msgid ""
"Create an object that operates like a regular reader but maps the "
"information in each row to a :class:`dict` whose keys are given by the "
"optional *fieldnames* parameter."
msgstr ""

#: ../../library/csv.rst:157
msgid ""
"The *fieldnames* parameter is a :term:`sequence`.  If *fieldnames* is "
"omitted, the values in the first row of file *f* will be used as the "
"fieldnames and will be omitted from the results. If *fieldnames* is "
"provided, they will be used and the first row will be included in the "
"results.  Regardless of how the fieldnames are determined, the dictionary "
"preserves their original ordering."
msgstr ""

#: ../../library/csv.rst:164
msgid ""
"If a row has more fields than fieldnames, the remaining data is put in a "
"list and stored with the fieldname specified by *restkey* (which defaults to"
" ``None``).  If a non-blank row has fewer fields than fieldnames, the "
"missing values are filled-in with the value of *restval* (which defaults to "
"``None``)."
msgstr ""

#: ../../library/csv.rst:170
msgid ""
"All other optional or keyword arguments are passed to the underlying "
":class:`reader` instance."
msgstr ""

#: ../../library/csv.rst:173 ../../library/csv.rst:217
msgid ""
"If the argument passed to *fieldnames* is an iterator, it will be coerced to"
" a :class:`list`."
msgstr ""

#: ../../library/csv.rst:175
msgid "Returned rows are now of type :class:`OrderedDict`."
msgstr ""
"Baris-baris yang dikembalikan sekarang memiliki tipe :class:`OrderedDict`."

#: ../../library/csv.rst:178
msgid "Returned rows are now of type :class:`dict`."
msgstr "Baris-baris yang dikembalikan sekarang memiliki tipe :class:`dict`."

#: ../../library/csv.rst:183
msgid ""
">>> import csv\n"
">>> with open('names.csv', newline='') as csvfile:\n"
"...     reader = csv.DictReader(csvfile)\n"
"...     for row in reader:\n"
"...         print(row['first_name'], row['last_name'])\n"
"...\n"
"Eric Idle\n"
"John Cleese\n"
"\n"
">>> print(row)\n"
"{'first_name': 'John', 'last_name': 'Cleese'}"
msgstr ""

#: ../../library/csv.rst:199
msgid ""
"Create an object which operates like a regular writer but maps dictionaries "
"onto output rows.  The *fieldnames* parameter is a :mod:`sequence "
"<collections.abc>` of keys that identify the order in which values in the "
"dictionary passed to the :meth:`~csvwriter.writerow` method are written to "
"file *f*.  The optional *restval* parameter specifies the value to be "
"written if the dictionary is missing a key in *fieldnames*.  If the "
"dictionary passed to the :meth:`~csvwriter.writerow` method contains a key "
"not found in *fieldnames*, the optional *extrasaction* parameter indicates "
"what action to take. If it is set to ``'raise'``, the default value, a "
":exc:`ValueError` is raised. If it is set to ``'ignore'``, extra values in "
"the dictionary are ignored. Any other optional or keyword arguments are "
"passed to the underlying :class:`writer` instance."
msgstr ""

#: ../../library/csv.rst:214
msgid ""
"Note that unlike the :class:`DictReader` class, the *fieldnames* parameter "
"of the :class:`DictWriter` class is not optional."
msgstr ""

#: ../../library/csv.rst:221
msgid ""
"import csv\n"
"\n"
"with open('names.csv', 'w', newline='') as csvfile:\n"
"    fieldnames = ['first_name', 'last_name']\n"
"    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n"
"\n"
"    writer.writeheader()\n"
"    writer.writerow({'first_name': 'Baked', 'last_name': 'Beans'})\n"
"    writer.writerow({'first_name': 'Lovely', 'last_name': 'Spam'})\n"
"    writer.writerow({'first_name': 'Wonderful', 'last_name': 'Spam'})"
msgstr ""

#: ../../library/csv.rst:235
msgid ""
"The :class:`Dialect` class is a container class whose attributes contain "
"information for how to handle doublequotes, whitespace, delimiters, etc. Due"
" to the lack of a strict CSV specification, different applications produce "
"subtly different CSV data.  :class:`Dialect` instances define how "
":class:`reader` and :class:`writer` instances behave."
msgstr ""

#: ../../library/csv.rst:241
msgid ""
"All available :class:`Dialect` names are returned by :func:`list_dialects`, "
"and they can be registered with specific :class:`reader` and :class:`writer`"
" classes through their initializer (``__init__``) functions like this::"
msgstr ""

#: ../../library/csv.rst:245
msgid ""
"import csv\n"
"\n"
"with open('students.csv', 'w', newline='') as csvfile:\n"
"    writer = csv.writer(csvfile, dialect='unix')"
msgstr ""

#: ../../library/csv.rst:253
msgid ""
"The :class:`excel` class defines the usual properties of an Excel-generated "
"CSV file.  It is registered with the dialect name ``'excel'``."
msgstr ""

#: ../../library/csv.rst:259
msgid ""
"The :class:`excel_tab` class defines the usual properties of an Excel-"
"generated TAB-delimited file.  It is registered with the dialect name "
"``'excel-tab'``."
msgstr ""

#: ../../library/csv.rst:265
msgid ""
"The :class:`unix_dialect` class defines the usual properties of a CSV file "
"generated on UNIX systems, i.e. using ``'\\n'`` as line terminator and "
"quoting all fields.  It is registered with the dialect name ``'unix'``."
msgstr ""

#: ../../library/csv.rst:274
msgid "The :class:`Sniffer` class is used to deduce the format of a CSV file."
msgstr ""
"Kelas :class:`Sniffer` digunakan untuk menyimpulkan format sebuah file CSV."

#: ../../library/csv.rst:276
msgid "The :class:`Sniffer` class provides two methods:"
msgstr "Kelas :class:`Sniffer` menyediakan dua metode:"

#: ../../library/csv.rst:280
msgid ""
"Analyze the given *sample* and return a :class:`Dialect` subclass reflecting"
" the parameters found.  If the optional *delimiters* parameter is given, it "
"is interpreted as a string containing possible valid delimiter characters."
msgstr ""

#: ../../library/csv.rst:288
msgid ""
"Analyze the sample text (presumed to be in CSV format) and return "
":const:`True` if the first row appears to be a series of column headers. "
"Inspecting each column, one of two key criteria will be considered to "
"estimate if the sample contains a header:"
msgstr ""

#: ../../library/csv.rst:293
msgid "the second through n-th rows contain numeric values"
msgstr ""

#: ../../library/csv.rst:294
msgid ""
"the second through n-th rows contain strings where at least one value's "
"length differs from that of the putative header of that column."
msgstr ""

#: ../../library/csv.rst:297
msgid ""
"Twenty rows after the first row are sampled; if more than half of columns + "
"rows meet the criteria, :const:`True` is returned."
msgstr ""

#: ../../library/csv.rst:302
msgid ""
"This method is a rough heuristic and may produce both false positives and "
"negatives."
msgstr ""

#: ../../library/csv.rst:305
msgid "An example for :class:`Sniffer` use::"
msgstr "Sebuah contoh untuk penggunaan :class:`Sniffer`::"

#: ../../library/csv.rst:307
msgid ""
"with open('example.csv', newline='') as csvfile:\n"
"    dialect = csv.Sniffer().sniff(csvfile.read(1024))\n"
"    csvfile.seek(0)\n"
"    reader = csv.reader(csvfile, dialect)\n"
"    # ... process CSV file contents here ..."
msgstr ""

#: ../../library/csv.rst:316
msgid "The :mod:`csv` module defines the following constants:"
msgstr ""

#: ../../library/csv.rst:320
msgid "Instructs :class:`writer` objects to quote all fields."
msgstr "Menginstruksikan objek :class:`writer` untuk mengutip semua fields."

#: ../../library/csv.rst:325
msgid ""
"Instructs :class:`writer` objects to only quote those fields which contain "
"special characters such as *delimiter*, *quotechar* or any of the characters"
" in *lineterminator*."
msgstr ""
"Menginstruksikan objek :class:`writer` untuk hanya mengutip fields yang "
"berisi karakter spesial seperti *delimiter*, *quotechar* atau salah satu "
"karakter dalam *lineterminator*."

#: ../../library/csv.rst:332
msgid "Instructs :class:`writer` objects to quote all non-numeric fields."
msgstr ""
"Menginstuksikan objek :class:`writer` untuk mengutip semua fields yang tidak"
" memiliki angka."

#: ../../library/csv.rst:334
msgid ""
"Instructs :class:`reader` objects to convert all non-quoted fields to type "
":class:`float`."
msgstr ""

#: ../../library/csv.rst:337
msgid ""
"Some numeric types, such as :class:`bool`, :class:`~fractions.Fraction`, or "
":class:`~enum.IntEnum`, have a string representation that cannot be "
"converted to :class:`float`. They cannot be read in the "
":data:`QUOTE_NONNUMERIC` and :data:`QUOTE_STRINGS` modes."
msgstr ""

#: ../../library/csv.rst:345
msgid ""
"Instructs :class:`writer` objects to never quote fields.  When the current "
"*delimiter* occurs in output data it is preceded by the current *escapechar*"
" character.  If *escapechar* is not set, the writer will raise :exc:`Error` "
"if any characters that require escaping are encountered."
msgstr ""

#: ../../library/csv.rst:350
msgid ""
"Instructs :class:`reader` objects to perform no special processing of quote "
"characters."
msgstr ""

#: ../../library/csv.rst:354
msgid ""
"Instructs :class:`writer` objects to quote all fields which are not "
"``None``.  This is similar to :data:`QUOTE_ALL`, except that if a field "
"value is ``None`` an empty (unquoted) string is written."
msgstr ""

#: ../../library/csv.rst:358
msgid ""
"Instructs :class:`reader` objects to interpret an empty (unquoted) field as "
"``None`` and to otherwise behave as :data:`QUOTE_ALL`."
msgstr ""

#: ../../library/csv.rst:365
msgid ""
"Instructs :class:`writer` objects to always place quotes around fields which"
" are strings.  This is similar to :data:`QUOTE_NONNUMERIC`, except that if a"
" field value is ``None`` an empty (unquoted) string is written."
msgstr ""

#: ../../library/csv.rst:369
msgid ""
"Instructs :class:`reader` objects to interpret an empty (unquoted) string as"
" ``None`` and to otherwise behave as :data:`QUOTE_NONNUMERIC`."
msgstr ""

#: ../../library/csv.rst:374
msgid "The :mod:`csv` module defines the following exception:"
msgstr "Modul :mod:`csv` berisi exception dibawah ini:"

#: ../../library/csv.rst:379
msgid "Raised by any of the functions when an error is detected."
msgstr ""

#: ../../library/csv.rst:384
msgid "Dialects and Formatting Parameters"
msgstr "Dialek dan Parameter Pemformatan"

#: ../../library/csv.rst:386
msgid ""
"To make it easier to specify the format of input and output records, "
"specific formatting parameters are grouped together into dialects.  A "
"dialect is a subclass of the :class:`Dialect` class containing various "
"attributes describing the format of the CSV file.  When creating "
":class:`reader` or :class:`writer` objects, the programmer can specify a "
"string or a subclass of the :class:`Dialect` class as the dialect parameter."
"  In addition to, or instead of, the *dialect* parameter, the programmer can"
" also specify individual formatting parameters, which have the same names as"
" the attributes defined below for the :class:`Dialect` class."
msgstr ""

#: ../../library/csv.rst:396
msgid "Dialects support the following attributes:"
msgstr "Dialek mendukung atribut dibawah ini:"

#: ../../library/csv.rst:401
msgid ""
"A one-character string used to separate fields.  It defaults to ``','``."
msgstr ""
"Sebuah karakter yang digunakan sebagai pemisah fields. Dengan nilai bawaan "
"``','``. "

#: ../../library/csv.rst:406
msgid ""
"Controls how instances of *quotechar* appearing inside a field should "
"themselves be quoted.  When :const:`True`, the character is doubled. When "
":const:`False`, the *escapechar* is used as a prefix to the *quotechar*.  It"
" defaults to :const:`True`."
msgstr ""

#: ../../library/csv.rst:411
msgid ""
"On output, if *doublequote* is :const:`False` and no *escapechar* is set, "
":exc:`Error` is raised if a *quotechar* is found in a field."
msgstr ""

#: ../../library/csv.rst:417
msgid ""
"A one-character string used by the writer to escape the *delimiter* if "
"*quoting* is set to :const:`QUOTE_NONE` and the *quotechar* if *doublequote*"
" is :const:`False`. On reading, the *escapechar* removes any special meaning"
" from the following character. It defaults to :const:`None`, which disables "
"escaping."
msgstr ""

#: ../../library/csv.rst:422
msgid "An empty *escapechar* is not allowed."
msgstr ""

#: ../../library/csv.rst:427
msgid ""
"The string used to terminate lines produced by the :class:`writer`. It "
"defaults to ``'\\r\\n'``."
msgstr ""

#: ../../library/csv.rst:432
msgid ""
"The :class:`reader` is hard-coded to recognise either ``'\\r'`` or ``'\\n'``"
" as end-of-line, and ignores *lineterminator*. This behavior may change in "
"the future."
msgstr ""

#: ../../library/csv.rst:439
msgid ""
"A one-character string used to quote fields containing special characters, "
"such as the *delimiter* or *quotechar*, or which contain new-line "
"characters.  It defaults to ``'\"'``."
msgstr ""

#: ../../library/csv.rst:443
msgid "An empty *quotechar* is not allowed."
msgstr ""

#: ../../library/csv.rst:448
msgid ""
"Controls when quotes should be generated by the writer and recognised by the"
" reader.  It can take on any of the :ref:`QUOTE_\\* constants <csv-"
"constants>` and defaults to :const:`QUOTE_MINIMAL`."
msgstr ""

#: ../../library/csv.rst:455
msgid ""
"When :const:`True`, spaces immediately following the *delimiter* are "
"ignored. The default is :const:`False`."
msgstr ""

#: ../../library/csv.rst:461
msgid ""
"When ``True``, raise exception :exc:`Error` on bad CSV input. The default is"
" ``False``."
msgstr ""

#: ../../library/csv.rst:467
msgid "Reader Objects"
msgstr ""

#: ../../library/csv.rst:469
msgid ""
"Reader objects (:class:`DictReader` instances and objects returned by the "
":func:`reader` function) have the following public methods:"
msgstr ""

#: ../../library/csv.rst:474
msgid ""
"Return the next row of the reader's iterable object as a list (if the object"
" was returned from :func:`reader`) or a dict (if it is a :class:`DictReader`"
" instance), parsed according to the current :class:`Dialect`.  Usually you "
"should call this as ``next(reader)``."
msgstr ""

#: ../../library/csv.rst:480
msgid "Reader objects have the following public attributes:"
msgstr ""

#: ../../library/csv.rst:484
msgid "A read-only description of the dialect in use by the parser."
msgstr ""

#: ../../library/csv.rst:489
msgid ""
"The number of lines read from the source iterator. This is not the same as "
"the number of records returned, as records can span multiple lines."
msgstr ""

#: ../../library/csv.rst:493
msgid "DictReader objects have the following public attribute:"
msgstr "Objek DictReader memiliki atribut publik sebagai berikut:"

#: ../../library/csv.rst:497
msgid ""
"If not passed as a parameter when creating the object, this attribute is "
"initialized upon first access or when the first record is read from the "
"file."
msgstr ""

#: ../../library/csv.rst:504
msgid "Writer Objects"
msgstr ""

#: ../../library/csv.rst:506
msgid ""
":class:`writer` objects (:class:`DictWriter` instances and objects returned "
"by the :func:`writer` function) have the following public methods.  A *row* "
"must be an iterable of strings or numbers for :class:`writer` objects and a "
"dictionary mapping fieldnames to strings or numbers (by passing them through"
" :func:`str` first) for :class:`DictWriter` objects.  Note that complex "
"numbers are written out surrounded by parens. This may cause some problems "
"for other programs which read CSV files (assuming they support complex "
"numbers at all)."
msgstr ""

#: ../../library/csv.rst:517
msgid ""
"Write the *row* parameter to the writer's file object, formatted according "
"to the current :class:`Dialect`. Return the return value of the call to the "
"*write* method of the underlying file object."
msgstr ""

#: ../../library/csv.rst:521
msgid "Added support of arbitrary iterables."
msgstr ""

#: ../../library/csv.rst:526
msgid ""
"Write all elements in *rows* (an iterable of *row* objects as described "
"above) to the writer's file object, formatted according to the current "
"dialect."
msgstr ""

#: ../../library/csv.rst:530
msgid "Writer objects have the following public attribute:"
msgstr ""

#: ../../library/csv.rst:535
msgid "A read-only description of the dialect in use by the writer."
msgstr ""

#: ../../library/csv.rst:538
msgid "DictWriter objects have the following public method:"
msgstr "Objek DictWriter memiliki metode publik sebagai berikut:"

#: ../../library/csv.rst:543
msgid ""
"Write a row with the field names (as specified in the constructor) to the "
"writer's file object, formatted according to the current dialect. Return the"
" return value of the :meth:`csvwriter.writerow` call used internally."
msgstr ""

#: ../../library/csv.rst:548
msgid ""
":meth:`writeheader` now also returns the value returned by the "
":meth:`csvwriter.writerow` method it uses internally."
msgstr ""

#: ../../library/csv.rst:556
msgid "Examples"
msgstr "Contoh-contoh"

#: ../../library/csv.rst:558
msgid "The simplest example of reading a CSV file::"
msgstr "Contoh paling sederhana dari membaca sebuah file CSV::"

#: ../../library/csv.rst:560
msgid ""
"import csv\n"
"with open('some.csv', newline='') as f:\n"
"    reader = csv.reader(f)\n"
"    for row in reader:\n"
"        print(row)"
msgstr ""

#: ../../library/csv.rst:566
msgid "Reading a file with an alternate format::"
msgstr "Membaca file dengan format lain::"

#: ../../library/csv.rst:568
msgid ""
"import csv\n"
"with open('passwd', newline='') as f:\n"
"    reader = csv.reader(f, delimiter=':', quoting=csv.QUOTE_NONE)\n"
"    for row in reader:\n"
"        print(row)"
msgstr ""

#: ../../library/csv.rst:574
msgid "The corresponding simplest possible writing example is::"
msgstr "Contoh paling sederhana dari menulis ke sebuah file CSV::"

#: ../../library/csv.rst:576
msgid ""
"import csv\n"
"with open('some.csv', 'w', newline='') as f:\n"
"    writer = csv.writer(f)\n"
"    writer.writerows(someiterable)"
msgstr ""

#: ../../library/csv.rst:581
msgid ""
"Since :func:`open` is used to open a CSV file for reading, the file will by "
"default be decoded into unicode using the system default encoding (see "
":func:`locale.getencoding`).  To decode a file using a different encoding, "
"use the ``encoding`` argument of open::"
msgstr ""

#: ../../library/csv.rst:586
msgid ""
"import csv\n"
"with open('some.csv', newline='', encoding='utf-8') as f:\n"
"    reader = csv.reader(f)\n"
"    for row in reader:\n"
"        print(row)"
msgstr ""

#: ../../library/csv.rst:592
msgid ""
"The same applies to writing in something other than the system default "
"encoding: specify the encoding argument when opening the output file."
msgstr ""
"Hal yang sama berlaku ketika menulis sesuatu yang berbeda dengan default "
"encoding dari sistem: tentukan argumen encoding ketika membuka file output."

#: ../../library/csv.rst:595
msgid "Registering a new dialect::"
msgstr "Mendaftarkan dialek baru::"

#: ../../library/csv.rst:597
msgid ""
"import csv\n"
"csv.register_dialect('unixpwd', delimiter=':', quoting=csv.QUOTE_NONE)\n"
"with open('passwd', newline='') as f:\n"
"    reader = csv.reader(f, 'unixpwd')"
msgstr ""

#: ../../library/csv.rst:602
msgid ""
"A slightly more advanced use of the reader --- catching and reporting "
"errors::"
msgstr ""

#: ../../library/csv.rst:604
msgid ""
"import csv, sys\n"
"filename = 'some.csv'\n"
"with open(filename, newline='') as f:\n"
"    reader = csv.reader(f)\n"
"    try:\n"
"        for row in reader:\n"
"            print(row)\n"
"    except csv.Error as e:\n"
"        sys.exit(f'file {filename}, line {reader.line_num}: {e}')"
msgstr ""

#: ../../library/csv.rst:614
msgid ""
"And while the module doesn't directly support parsing strings, it can easily"
" be done::"
msgstr ""

#: ../../library/csv.rst:617
msgid ""
"import csv\n"
"for row in csv.reader(['one,two,three']):\n"
"    print(row)"
msgstr ""

#: ../../library/csv.rst:623
msgid "Footnotes"
msgstr "Catatan kaki"

#: ../../library/csv.rst:624
msgid ""
"If ``newline=''`` is not specified, newlines embedded inside quoted fields "
"will not be interpreted correctly, and on platforms that use ``\\r\\n`` "
"linendings on write an extra ``\\r`` will be added.  It should always be "
"safe to specify ``newline=''``, since the csv module does its own "
"(:term:`universal <universal newlines>`) newline handling."
msgstr ""

#: ../../library/csv.rst:11
msgid "csv"
msgstr "csv"

#: ../../library/csv.rst:11
msgid "data"
msgstr "data"

#: ../../library/csv.rst:11
msgid "tabular"
msgstr ""

#: ../../library/csv.rst:53
msgid "universal newlines"
msgstr ""

#: ../../library/csv.rst:53
msgid "csv.reader function"
msgstr ""
