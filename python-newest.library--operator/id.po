# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# oon arfiandwi <oon.arfiandwi@gmail.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2021-06-28 01:10+0000\n"
"Last-Translator: oon arfiandwi <oon.arfiandwi@gmail.com>, 2021\n"
"Language-Team: Indonesian (https://app.transifex.com/python-doc/teams/5390/id/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: id\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/operator.rst:2
msgid ":mod:`!operator` --- Standard operators as functions"
msgstr ""

#: ../../library/operator.rst:9
msgid "**Source code:** :source:`Lib/operator.py`"
msgstr ""

#: ../../library/operator.rst:18
msgid ""
"The :mod:`operator` module exports a set of efficient functions "
"corresponding to the intrinsic operators of Python.  For example, "
"``operator.add(x, y)`` is equivalent to the expression ``x+y``. Many "
"function names are those used for special methods, without the double "
"underscores.  For backward compatibility, many of these have a variant with "
"the double underscores kept. The variants without the double underscores are"
" preferred for clarity."
msgstr ""

#: ../../library/operator.rst:25
msgid ""
"The functions fall into categories that perform object comparisons, logical "
"operations, mathematical operations and sequence operations."
msgstr ""

#: ../../library/operator.rst:28
msgid ""
"The object comparison functions are useful for all objects, and are named "
"after the rich comparison operators they support:"
msgstr ""

#: ../../library/operator.rst:45
msgid ""
"Perform \"rich comparisons\" between *a* and *b*. Specifically, ``lt(a, b)``"
" is equivalent to ``a < b``, ``le(a, b)`` is equivalent to ``a <= b``, "
"``eq(a, b)`` is equivalent to ``a == b``, ``ne(a, b)`` is equivalent to ``a "
"!= b``, ``gt(a, b)`` is equivalent to ``a > b`` and ``ge(a, b)`` is "
"equivalent to ``a >= b``.  Note that these functions can return any value, "
"which may or may not be interpretable as a Boolean value.  See "
":ref:`comparisons` for more information about rich comparisons."
msgstr ""

#: ../../library/operator.rst:54
msgid ""
"The logical operations are also generally applicable to all objects, and "
"support truth tests, identity tests, and boolean operations:"
msgstr ""

#: ../../library/operator.rst:61
msgid ""
"Return the outcome of :keyword:`not` *obj*.  (Note that there is no "
":meth:`!__not__` method for object instances; only the interpreter core "
"defines this operation.  The result is affected by the "
":meth:`~object.__bool__` and :meth:`~object.__len__` methods.)"
msgstr ""

#: ../../library/operator.rst:69
msgid ""
"Return :const:`True` if *obj* is true, and :const:`False` otherwise.  This "
"is equivalent to using the :class:`bool` constructor."
msgstr ""

#: ../../library/operator.rst:75
msgid "Return ``a is b``.  Tests object identity."
msgstr ""

#: ../../library/operator.rst:80
msgid "Return ``a is not b``.  Tests object identity."
msgstr ""

#: ../../library/operator.rst:85
msgid "Return ``a is None``.  Tests object identity."
msgstr ""

#: ../../library/operator.rst:92
msgid "Return ``a is not None``.  Tests object identity."
msgstr ""

#: ../../library/operator.rst:97
msgid "The mathematical and bitwise operations are the most numerous:"
msgstr ""

#: ../../library/operator.rst:103
msgid "Return the absolute value of *obj*."
msgstr ""

#: ../../library/operator.rst:109
msgid "Return ``a + b``, for *a* and *b* numbers."
msgstr ""

#: ../../library/operator.rst:115
msgid "Return the bitwise and of *a* and *b*."
msgstr ""

#: ../../library/operator.rst:121
msgid "Return ``a // b``."
msgstr ""

#: ../../library/operator.rst:127
msgid "Return *a* converted to an integer.  Equivalent to ``a.__index__()``."
msgstr ""

#: ../../library/operator.rst:129
msgid ""
"The result always has exact type :class:`int`.  Previously, the result could"
" have been an instance of a subclass of ``int``."
msgstr ""

#: ../../library/operator.rst:139
msgid ""
"Return the bitwise inverse of the number *obj*.  This is equivalent to "
"``~obj``."
msgstr ""

#: ../../library/operator.rst:145
msgid "Return *a* shifted left by *b*."
msgstr ""

#: ../../library/operator.rst:151
msgid "Return ``a % b``."
msgstr ""

#: ../../library/operator.rst:157
msgid "Return ``a * b``, for *a* and *b* numbers."
msgstr ""

#: ../../library/operator.rst:163
msgid "Return ``a @ b``."
msgstr ""

#: ../../library/operator.rst:171
msgid "Return *obj* negated (``-obj``)."
msgstr ""

#: ../../library/operator.rst:177
msgid "Return the bitwise or of *a* and *b*."
msgstr ""

#: ../../library/operator.rst:183
msgid "Return *obj* positive (``+obj``)."
msgstr ""

#: ../../library/operator.rst:189
msgid "Return ``a ** b``, for *a* and *b* numbers."
msgstr ""

#: ../../library/operator.rst:195
msgid "Return *a* shifted right by *b*."
msgstr ""

#: ../../library/operator.rst:201
msgid "Return ``a - b``."
msgstr ""

#: ../../library/operator.rst:207
msgid ""
"Return ``a / b`` where 2/3 is .66 rather than 0.  This is also known as "
"\"true\" division."
msgstr ""

#: ../../library/operator.rst:214
msgid "Return the bitwise exclusive or of *a* and *b*."
msgstr ""

#: ../../library/operator.rst:217
msgid ""
"Operations which work with sequences (some of them with mappings too) "
"include:"
msgstr ""

#: ../../library/operator.rst:222
msgid "Return ``a + b`` for *a* and *b* sequences."
msgstr ""

#: ../../library/operator.rst:228
msgid "Return the outcome of the test ``b in a``. Note the reversed operands."
msgstr ""

#: ../../library/operator.rst:233
msgid "Return the number of occurrences of *b* in *a*."
msgstr ""

#: ../../library/operator.rst:239
msgid "Remove the value of *a* at index *b*."
msgstr ""

#: ../../library/operator.rst:245
msgid "Return the value of *a* at index *b*."
msgstr ""

#: ../../library/operator.rst:250
msgid "Return the index of the first of occurrence of *b* in *a*."
msgstr ""

#: ../../library/operator.rst:256
msgid "Set the value of *a* at index *b* to *c*."
msgstr ""

#: ../../library/operator.rst:261
msgid ""
"Return an estimated length for the object *obj*. First try to return its "
"actual length, then an estimate using :meth:`object.__length_hint__`, and "
"finally return the default value."
msgstr ""

#: ../../library/operator.rst:268
msgid "The following operation works with callables:"
msgstr ""

#: ../../library/operator.rst:273
msgid "Return ``obj(*args, **kwargs)``."
msgstr ""

#: ../../library/operator.rst:278
msgid ""
"The :mod:`operator` module also defines tools for generalized attribute and "
"item lookups.  These are useful for making fast field extractors as "
"arguments for :func:`map`, :func:`sorted`, :meth:`itertools.groupby`, or "
"other functions that expect a function argument."
msgstr ""

#: ../../library/operator.rst:287
msgid ""
"Return a callable object that fetches *attr* from its operand. If more than "
"one attribute is requested, returns a tuple of attributes. The attribute "
"names can also contain dots. For example:"
msgstr ""

#: ../../library/operator.rst:291
msgid ""
"After ``f = attrgetter('name')``, the call ``f(b)`` returns ``b.name``."
msgstr ""

#: ../../library/operator.rst:293
msgid ""
"After ``f = attrgetter('name', 'date')``, the call ``f(b)`` returns "
"``(b.name, b.date)``."
msgstr ""

#: ../../library/operator.rst:296
msgid ""
"After ``f = attrgetter('name.first', 'name.last')``, the call ``f(b)`` "
"returns ``(b.name.first, b.name.last)``."
msgstr ""

#: ../../library/operator.rst:299 ../../library/operator.rst:331
#: ../../library/operator.rst:379
msgid "Equivalent to::"
msgstr "Setara dengan::"

#: ../../library/operator.rst:301
msgid ""
"def attrgetter(*items):\n"
"    if any(not isinstance(item, str) for item in items):\n"
"        raise TypeError('attribute name must be a string')\n"
"    if len(items) == 1:\n"
"        attr = items[0]\n"
"        def g(obj):\n"
"            return resolve_attr(obj, attr)\n"
"    else:\n"
"        def g(obj):\n"
"            return tuple(resolve_attr(obj, attr) for attr in items)\n"
"    return g\n"
"\n"
"def resolve_attr(obj, attr):\n"
"    for name in attr.split(\".\"):\n"
"        obj = getattr(obj, name)\n"
"    return obj"
msgstr ""

#: ../../library/operator.rst:322
msgid ""
"Return a callable object that fetches *item* from its operand using the "
"operand's :meth:`~object.__getitem__` method.  If multiple items are "
"specified, returns a tuple of lookup values.  For example:"
msgstr ""

#: ../../library/operator.rst:326
msgid "After ``f = itemgetter(2)``, the call ``f(r)`` returns ``r[2]``."
msgstr ""

#: ../../library/operator.rst:328
msgid ""
"After ``g = itemgetter(2, 5, 3)``, the call ``g(r)`` returns ``(r[2], r[5], "
"r[3])``."
msgstr ""

#: ../../library/operator.rst:333
msgid ""
"def itemgetter(*items):\n"
"    if len(items) == 1:\n"
"        item = items[0]\n"
"        def g(obj):\n"
"            return obj[item]\n"
"    else:\n"
"        def g(obj):\n"
"            return tuple(obj[item] for item in items)\n"
"    return g"
msgstr ""

#: ../../library/operator.rst:343
msgid ""
"The items can be any type accepted by the operand's "
":meth:`~object.__getitem__` method.  Dictionaries accept any "
":term:`hashable` value.  Lists, tuples, and strings accept an index or a "
"slice:"
msgstr ""

#: ../../library/operator.rst:357
msgid ""
"Example of using :func:`itemgetter` to retrieve specific fields from a tuple"
" record:"
msgstr ""

#: ../../library/operator.rst:370
msgid ""
"Return a callable object that calls the method *name* on its operand.  If "
"additional arguments and/or keyword arguments are given, they will be given "
"to the method as well.  For example:"
msgstr ""

#: ../../library/operator.rst:374
msgid ""
"After ``f = methodcaller('name')``, the call ``f(b)`` returns ``b.name()``."
msgstr ""

#: ../../library/operator.rst:376
msgid ""
"After ``f = methodcaller('name', 'foo', bar=1)``, the call ``f(b)`` returns "
"``b.name('foo', bar=1)``."
msgstr ""

#: ../../library/operator.rst:381
msgid ""
"def methodcaller(name, /, *args, **kwargs):\n"
"    def caller(obj):\n"
"        return getattr(obj, name)(*args, **kwargs)\n"
"    return caller"
msgstr ""

#: ../../library/operator.rst:390
msgid "Mapping Operators to Functions"
msgstr ""

#: ../../library/operator.rst:392
msgid ""
"This table shows how abstract operations correspond to operator symbols in "
"the Python syntax and the functions in the :mod:`operator` module."
msgstr ""

#: ../../library/operator.rst:396
msgid "Operation"
msgstr "Operasi"

#: ../../library/operator.rst:396
msgid "Syntax"
msgstr "Sintaksis"

#: ../../library/operator.rst:396
msgid "Function"
msgstr "Fungsi"

#: ../../library/operator.rst:398
msgid "Addition"
msgstr "Penjumlahan"

#: ../../library/operator.rst:398
msgid "``a + b``"
msgstr "``a + b``"

#: ../../library/operator.rst:398
msgid "``add(a, b)``"
msgstr "``add(a, b)``"

#: ../../library/operator.rst:400
msgid "Concatenation"
msgstr "Perangkaian, *Concatenation*"

#: ../../library/operator.rst:400
msgid "``seq1 + seq2``"
msgstr "``seq1 + seq2``"

#: ../../library/operator.rst:400
msgid "``concat(seq1, seq2)``"
msgstr "``concat(seq1, seq2)``"

#: ../../library/operator.rst:402
msgid "Containment Test"
msgstr "Uji Pengurungan, *Containment*"

#: ../../library/operator.rst:402
msgid "``obj in seq``"
msgstr "``obj in seq``"

#: ../../library/operator.rst:402
msgid "``contains(seq, obj)``"
msgstr "``contains(seq, obj)``"

#: ../../library/operator.rst:404 ../../library/operator.rst:406
msgid "Division"
msgstr "Pembagian"

#: ../../library/operator.rst:404
msgid "``a / b``"
msgstr "``a / b``"

#: ../../library/operator.rst:404
msgid "``truediv(a, b)``"
msgstr "``truediv(a, b)``"

#: ../../library/operator.rst:406
msgid "``a // b``"
msgstr "``a // b``"

#: ../../library/operator.rst:406
msgid "``floordiv(a, b)``"
msgstr "``floordiv(a, b)``"

#: ../../library/operator.rst:408
msgid "Bitwise And"
msgstr ""

#: ../../library/operator.rst:408
msgid "``a & b``"
msgstr "``a & b``"

#: ../../library/operator.rst:408
msgid "``and_(a, b)``"
msgstr "``and_(a, b)``"

#: ../../library/operator.rst:410
msgid "Bitwise Exclusive Or"
msgstr ""

#: ../../library/operator.rst:410
msgid "``a ^ b``"
msgstr "``a ^ b``"

#: ../../library/operator.rst:410
msgid "``xor(a, b)``"
msgstr "``xor(a, b)``"

#: ../../library/operator.rst:412
msgid "Bitwise Inversion"
msgstr ""

#: ../../library/operator.rst:412
msgid "``~ a``"
msgstr "``~ a``"

#: ../../library/operator.rst:412
msgid "``invert(a)``"
msgstr "``invert(a)``"

#: ../../library/operator.rst:414
msgid "Bitwise Or"
msgstr ""

#: ../../library/operator.rst:414
msgid "``a | b``"
msgstr "``a | b``"

#: ../../library/operator.rst:414
msgid "``or_(a, b)``"
msgstr "``or_(a, b)``"

#: ../../library/operator.rst:416
msgid "Exponentiation"
msgstr "Operasi Eksponensial"

#: ../../library/operator.rst:416
msgid "``a ** b``"
msgstr "``a ** b``"

#: ../../library/operator.rst:416
msgid "``pow(a, b)``"
msgstr "``pow(a, b)``"

#: ../../library/operator.rst:418 ../../library/operator.rst:420
#: ../../library/operator.rst:422 ../../library/operator.rst:424
msgid "Identity"
msgstr "Identitas"

#: ../../library/operator.rst:418
msgid "``a is b``"
msgstr "``a is b``"

#: ../../library/operator.rst:418
msgid "``is_(a, b)``"
msgstr "``is_(a, b)``"

#: ../../library/operator.rst:420
msgid "``a is not b``"
msgstr "``a is not b``"

#: ../../library/operator.rst:420
msgid "``is_not(a, b)``"
msgstr "``is_not(a, b)``"

#: ../../library/operator.rst:422
msgid "``a is None``"
msgstr ""

#: ../../library/operator.rst:422
msgid "``is_none(a)``"
msgstr ""

#: ../../library/operator.rst:424
msgid "``a is not None``"
msgstr ""

#: ../../library/operator.rst:424
msgid "``is_not_none(a)``"
msgstr ""

#: ../../library/operator.rst:426
msgid "Indexed Assignment"
msgstr "Pemberian Nilai Terindeks"

#: ../../library/operator.rst:426
msgid "``obj[k] = v``"
msgstr "``obj[k] = v``"

#: ../../library/operator.rst:426
msgid "``setitem(obj, k, v)``"
msgstr "``setitem(obj, k, v)``"

#: ../../library/operator.rst:428
msgid "Indexed Deletion"
msgstr "Penghapusan Terindeks"

#: ../../library/operator.rst:428
msgid "``del obj[k]``"
msgstr "``del obj[k]``"

#: ../../library/operator.rst:428
msgid "``delitem(obj, k)``"
msgstr "``delitem(obj, k)``"

#: ../../library/operator.rst:430
msgid "Indexing"
msgstr "Pengindeksan"

#: ../../library/operator.rst:430
msgid "``obj[k]``"
msgstr "``obj[k]``"

#: ../../library/operator.rst:430
msgid "``getitem(obj, k)``"
msgstr "``getitem(obj, k)``"

#: ../../library/operator.rst:432
msgid "Left Shift"
msgstr "Geser, *Shift*, Kiri"

#: ../../library/operator.rst:432
msgid "``a << b``"
msgstr "``a << b``"

#: ../../library/operator.rst:432
msgid "``lshift(a, b)``"
msgstr "``lshift(a, b)``"

#: ../../library/operator.rst:434
msgid "Modulo"
msgstr "*Modulo*"

#: ../../library/operator.rst:434
msgid "``a % b``"
msgstr "``a % b``"

#: ../../library/operator.rst:434
msgid "``mod(a, b)``"
msgstr "``mod(a, b)``"

#: ../../library/operator.rst:436
msgid "Multiplication"
msgstr "Perkalian"

#: ../../library/operator.rst:436
msgid "``a * b``"
msgstr "``a * b``"

#: ../../library/operator.rst:436
msgid "``mul(a, b)``"
msgstr "``mul(a, b)``"

#: ../../library/operator.rst:438
msgid "Matrix Multiplication"
msgstr "Perkalian *Matrix*"

#: ../../library/operator.rst:438
msgid "``a @ b``"
msgstr "``a @ b``"

#: ../../library/operator.rst:438
msgid "``matmul(a, b)``"
msgstr "``matmul(a, b)``"

#: ../../library/operator.rst:440
msgid "Negation (Arithmetic)"
msgstr "Negasi (Aritmatika)"

#: ../../library/operator.rst:440
msgid "``- a``"
msgstr "``- a``"

#: ../../library/operator.rst:440
msgid "``neg(a)``"
msgstr "``neg(a)``"

#: ../../library/operator.rst:442
msgid "Negation (Logical)"
msgstr "Negasi (Logika)"

#: ../../library/operator.rst:442
msgid "``not a``"
msgstr "``not a``"

#: ../../library/operator.rst:442
msgid "``not_(a)``"
msgstr "``not_(a)``"

#: ../../library/operator.rst:444
msgid "Positive"
msgstr "Positif"

#: ../../library/operator.rst:444
msgid "``+ a``"
msgstr "``+ a``"

#: ../../library/operator.rst:444
msgid "``pos(a)``"
msgstr "``pos(a)``"

#: ../../library/operator.rst:446
msgid "Right Shift"
msgstr "Geser, *Shift*, Kanan"

#: ../../library/operator.rst:446
msgid "``a >> b``"
msgstr "``a >> b``"

#: ../../library/operator.rst:446
msgid "``rshift(a, b)``"
msgstr "``rshift(a, b)``"

#: ../../library/operator.rst:448
msgid "Slice Assignment"
msgstr ""

#: ../../library/operator.rst:448
msgid "``seq[i:j] = values``"
msgstr ""

#: ../../library/operator.rst:448
msgid "``setitem(seq, slice(i, j), values)``"
msgstr ""

#: ../../library/operator.rst:450
msgid "Slice Deletion"
msgstr ""

#: ../../library/operator.rst:450
msgid "``del seq[i:j]``"
msgstr ""

#: ../../library/operator.rst:450
msgid "``delitem(seq, slice(i, j))``"
msgstr ""

#: ../../library/operator.rst:452
msgid "Slicing"
msgstr ""

#: ../../library/operator.rst:452
msgid "``seq[i:j]``"
msgstr ""

#: ../../library/operator.rst:452
msgid "``getitem(seq, slice(i, j))``"
msgstr ""

#: ../../library/operator.rst:454
msgid "String Formatting"
msgstr ""

#: ../../library/operator.rst:454
msgid "``s % obj``"
msgstr ""

#: ../../library/operator.rst:454
msgid "``mod(s, obj)``"
msgstr ""

#: ../../library/operator.rst:456
msgid "Subtraction"
msgstr "Pengurangan"

#: ../../library/operator.rst:456
msgid "``a - b``"
msgstr "``a - b``"

#: ../../library/operator.rst:456
msgid "``sub(a, b)``"
msgstr "``sub(a, b)``"

#: ../../library/operator.rst:458
msgid "Truth Test"
msgstr "Uji Kebenaran"

#: ../../library/operator.rst:458
msgid "``obj``"
msgstr "``obj``"

#: ../../library/operator.rst:458
msgid "``truth(obj)``"
msgstr "``truth(obj)``"

#: ../../library/operator.rst:460 ../../library/operator.rst:462
#: ../../library/operator.rst:468 ../../library/operator.rst:470
msgid "Ordering"
msgstr "Pengurutan"

#: ../../library/operator.rst:460
msgid "``a < b``"
msgstr "``a < b``"

#: ../../library/operator.rst:460
msgid "``lt(a, b)``"
msgstr "``lt(a, b)``"

#: ../../library/operator.rst:462
msgid "``a <= b``"
msgstr "``a <= b``"

#: ../../library/operator.rst:462
msgid "``le(a, b)``"
msgstr "``le(a, b)``"

#: ../../library/operator.rst:464
msgid "Equality"
msgstr "Kesamaan"

#: ../../library/operator.rst:464
msgid "``a == b``"
msgstr "``a == b``"

#: ../../library/operator.rst:464
msgid "``eq(a, b)``"
msgstr "``eq(a, b)``"

#: ../../library/operator.rst:466
msgid "Difference"
msgstr "Perbedaan"

#: ../../library/operator.rst:466
msgid "``a != b``"
msgstr "``a != b``"

#: ../../library/operator.rst:466
msgid "``ne(a, b)``"
msgstr "``ne(a, b)``"

#: ../../library/operator.rst:468
msgid "``a >= b``"
msgstr "``a >= b``"

#: ../../library/operator.rst:468
msgid "``ge(a, b)``"
msgstr "``ge(a, b)``"

#: ../../library/operator.rst:470
msgid "``a > b``"
msgstr "``a > b``"

#: ../../library/operator.rst:470
msgid "``gt(a, b)``"
msgstr "``gt(a, b)``"

#: ../../library/operator.rst:474
msgid "In-place Operators"
msgstr ""

#: ../../library/operator.rst:476
msgid ""
"Many operations have an \"in-place\" version.  Listed below are functions "
"providing a more primitive access to in-place operators than the usual "
"syntax does; for example, the :term:`statement` ``x += y`` is equivalent to "
"``x = operator.iadd(x, y)``.  Another way to put it is to say that ``z = "
"operator.iadd(x, y)`` is equivalent to the compound statement ``z = x; z += "
"y``."
msgstr ""

#: ../../library/operator.rst:483
msgid ""
"In those examples, note that when an in-place method is called, the "
"computation and assignment are performed in two separate steps.  The in-"
"place functions listed below only do the first step, calling the in-place "
"method.  The second step, assignment, is not handled."
msgstr ""

#: ../../library/operator.rst:488
msgid ""
"For immutable targets such as strings, numbers, and tuples, the updated "
"value is computed, but not assigned back to the input variable:"
msgstr ""

#: ../../library/operator.rst:497
msgid ""
"For mutable targets such as lists and dictionaries, the in-place method will"
" perform the update, so no subsequent assignment is necessary:"
msgstr ""

#: ../../library/operator.rst:509
msgid "``a = iadd(a, b)`` is equivalent to ``a += b``."
msgstr ""

#: ../../library/operator.rst:515
msgid "``a = iand(a, b)`` is equivalent to ``a &= b``."
msgstr ""

#: ../../library/operator.rst:521
msgid ""
"``a = iconcat(a, b)`` is equivalent to ``a += b`` for *a* and *b* sequences."
msgstr ""

#: ../../library/operator.rst:527
msgid "``a = ifloordiv(a, b)`` is equivalent to ``a //= b``."
msgstr ""

#: ../../library/operator.rst:533
msgid "``a = ilshift(a, b)`` is equivalent to ``a <<= b``."
msgstr ""

#: ../../library/operator.rst:539
msgid "``a = imod(a, b)`` is equivalent to ``a %= b``."
msgstr ""

#: ../../library/operator.rst:545
msgid "``a = imul(a, b)`` is equivalent to ``a *= b``."
msgstr ""

#: ../../library/operator.rst:551
msgid "``a = imatmul(a, b)`` is equivalent to ``a @= b``."
msgstr ""

#: ../../library/operator.rst:559
msgid "``a = ior(a, b)`` is equivalent to ``a |= b``."
msgstr ""

#: ../../library/operator.rst:565
msgid "``a = ipow(a, b)`` is equivalent to ``a **= b``."
msgstr ""

#: ../../library/operator.rst:571
msgid "``a = irshift(a, b)`` is equivalent to ``a >>= b``."
msgstr ""

#: ../../library/operator.rst:577
msgid "``a = isub(a, b)`` is equivalent to ``a -= b``."
msgstr ""

#: ../../library/operator.rst:583
msgid "``a = itruediv(a, b)`` is equivalent to ``a /= b``."
msgstr ""

#: ../../library/operator.rst:589
msgid "``a = ixor(a, b)`` is equivalent to ``a ^= b``."
msgstr ""
