# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# oon arfiandwi <oon.arfiandwi@gmail.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-23 06:25+0000\n"
"PO-Revision-Date: 2017-02-16 17:43+0000\n"
"Last-Translator: oon arfiandwi <oon.arfiandwi@gmail.com>, 2021\n"
"Language-Team: Indonesian (https://www.transifex.com/python-doc/teams/5390/id/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: id\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../faq/windows.rst:9
msgid "Python on Windows FAQ"
msgstr "FAQ Python di Windows"

#: ../../faq/windows.rst:12
msgid "Contents"
msgstr "Konten"

#: ../../faq/windows.rst:22
msgid "How do I run a Python program under Windows?"
msgstr "Bagaimana cara mengoperasikan program Python di Windows?"

#: ../../faq/windows.rst:24
msgid ""
"This is not necessarily a straightforward question. If you are already "
"familiar with running programs from the Windows command line then everything"
" will seem obvious; otherwise, you might need a little more guidance."
msgstr ""
"Ini belum tentu pertanyaan langsung. Jika Anda sudahFamiliar dengan program "
"yang berjalan dari Windows command line maka semuanyaAkan tampak jelas; jika"
" tidak, Anda mungkin membutuhkan lebih banyak panduan. "

#: ../../faq/windows.rst:28
msgid ""
"Unless you use some sort of integrated development environment, you will end"
" up *typing* Windows commands into what is variously referred to as a \"DOS "
"window\" or \"Command prompt window\".  Usually you can create such a window"
" from your search bar by searching for ``cmd``.  You should be able to "
"recognize when you have started such a window because you will see a Windows"
" \"command prompt\", which usually looks like this:"
msgstr ""
"Kecuali jika Anda menggunakan semacam lingkungan pengembangan terintegrasi, "
"Anda akan berakhir dengan mengetik perintah Windows menjadi apa yang disebut"
" sebagai \"DOS window\" atau \"Command prompt window\". Biasanya anda dapat "
"membuat sebuah *window* dari bilah pencarian dengan mencari ``cmd``.  Anda "
"juga dapat mengenali ketika anda memulai sebuah *window* karena Anda akan "
"melihat sebuah Windows \"command prompt\", yang mana biasanya akan tampak "
"seperti ini:"

#: ../../faq/windows.rst:39
msgid ""
"The letter may be different, and there might be other things after it, so "
"you might just as easily see something like:"
msgstr ""
"Suratnya mungkin berbeda, dan mungkin ada hal lain setelahnya, jadi kamu "
"mungkin dapat dengan mudah melihat sesuatu seperti ini:"

#: ../../faq/windows.rst:46
msgid ""
"depending on how your computer has been set up and what else you have "
"recently done with it.  Once you have started such a window, you are well on"
" the way to running Python programs."
msgstr ""
"tergantung pada bagaimana komputer Anda telah diatur dan apa lagi yang Anda "
"baru saja selesai dengan itu. Setelah Anda memulai sebuah window seperti "
"itu, Anda sudah siap menjalankan program Python."

#: ../../faq/windows.rst:50
msgid ""
"You need to realize that your Python scripts have to be processed by another"
" program called the Python *interpreter*.  The interpreter reads your "
"script, compiles it into bytecodes, and then executes the bytecodes to run "
"your program. So, how do you arrange for the interpreter to handle your "
"Python?"
msgstr ""
"Anda perlu menyadari bahwa skrip Python Anda harus diproses oleh orang "
"program yang disebut dengan Python *interpreter*. Interpreter itu membaca "
"skrip anda, mengkompilasinya menjadi bytecode, dan kemudian mengeksekusi "
"bytecode untuk menjalankan program Anda. Jadi, bagaimana Anda mengatur "
"interpreter untuk menangani PythonAnda?"

#: ../../faq/windows.rst:55
msgid ""
"First, you need to make sure that your command window recognises the word "
"\"py\" as an instruction to start the interpreter.  If you have opened a "
"command window, you should try entering the command ``py`` and hitting "
"return:"
msgstr ""
"Pertama, Anda perlu memastikan bahwa command window Anda mengenali kata "
"\"py\" sebagai instruksi untuk memulai penerjemah. Jika Anda telah membuka "
"command window, Anda dapat mengketik command ``py`` dan menekan kembali:"

#: ../../faq/windows.rst:64
msgid "You should then see something like:"
msgstr "Anda dapat melihat sesuatu tampak seperti ini:"

#: ../../faq/windows.rst:72
msgid ""
"You have started the interpreter in \"interactive mode\". That means you can"
" enter Python statements or expressions interactively and have them executed"
" or evaluated while you wait.  This is one of Python's strongest features.  "
"Check it by entering a few expressions of your choice and seeing the "
"results:"
msgstr ""
"Anda telah memulai penerjemah dalam \"mode interaktif\". Artinya kamu bisa "
"masuk ke dalam pernyataan atau ekspresi Python secara interaktif dan "
"mengeksekusi atau mengevaluasi selang Anda menunggu. Ini adalah salah satu "
"fitur terkuat Python. Periksa dengan memasukkan beberapa ekspresi pilihan "
"Anda dan melihat hasilnya:"

#: ../../faq/windows.rst:84
msgid ""
"Many people use the interactive mode as a convenient yet highly programmable"
" calculator.  When you want to end your interactive Python session, call the"
" :func:`exit` function or hold the :kbd:`Ctrl` key down while you enter a "
":kbd:`Z`, then hit the \":kbd:`Enter`\" key to get back to your Windows "
"command prompt."
msgstr ""
"Banyak orang menggunakan mode interaktif sebagai cara yang nyaman namun "
"sangat dapat diprogram kalulator. Saat Anda ingin mengakhiri sesi Python "
"interaktif Anda, panggil fungsi :func:`exit` atau tahan tombol :kbd:`Ctrl` "
"saat anda menekan tombol :kbd:`Z`, lalu tekan \":kbd:`Enter`\" untuk kembali"
" ke Windows command prompt Anda."

#: ../../faq/windows.rst:90
msgid ""
"You may also find that you have a Start-menu entry such as "
":menuselection:`Start --> Programs --> Python 3.x --> Python (command line)`"
" that results in you seeing the ``>>>`` prompt in a new window.  If so, the "
"window will disappear after you call the :func:`exit` function or enter the "
":kbd:`Ctrl-Z` character; Windows is running a single \"python\" command in "
"the window, and closes it when you terminate the interpreter."
msgstr ""
"Anda mungkin juga menemukan bahwa Anda memiliki entri Start-menu seperti "
":menuselection:`Start  --> Programs --> Python 3.x --> Python (command "
"line)` yang mengakibatkan Anda melihat prompt  ``>>>`` di jendela baru. Jika"
" demikian, jendela tersebut akan menghilang setelah anda memanggil fungsi "
":func:`exit` atau menekan :kbd:`Ctrl-Z` karakter; Windows menjalankan satu "
"perintah \"python\" di jendela tersebut, dan tutup itu ketika anda akan "
"mengakhiri interpreter."

#: ../../faq/windows.rst:97
msgid ""
"Now that we know the ``py`` command is recognized, you can give your Python "
"script to it. You'll have to give either an absolute or a relative path to "
"the Python script. Let's say your Python script is located in your desktop "
"and is named ``hello.py``, and your command prompt is nicely opened in your "
"home directory so you're seeing something similar to::"
msgstr ""
"Sekarang kita tahu bahwa perintah ``py`` dikenali, Anda dapat memberikan hal"
" tersebut ke dalam Python script. Anda harus memberikan jalur absolut atau "
"relatif ke Python skrip tersebut. Katakanlah skrip Python Anda ada di "
"desktop Anda dan itu bernama ``hello.py``. dan command prompt Anda terbuka "
"di direktori home jadi anda dapat tampak melihat sesuatu familiar seperti::"

#: ../../faq/windows.rst:106
msgid ""
"So now you'll ask the ``py`` command to give your script to Python by typing"
" ``py`` followed by your script path::"
msgstr ""
"Jadi sekarang Anda akan meminta perintah ``py`` untuk memberikan skrip Anda "
"ke Python dengan mengetik ``py`` yang dilanjuti dengan jalur skrip Anda::"

#: ../../faq/windows.rst:114
msgid "How do I make Python scripts executable?"
msgstr "Bagaimana cara saya membuat skrip Python dapat dieksekusi?"

#: ../../faq/windows.rst:116
msgid ""
"On Windows, the standard Python installer already associates the .py "
"extension with a file type (Python.File) and gives that file type an open "
"command that runs the interpreter (``D:\\Program Files\\Python\\python.exe "
"\"%1\" %*``).  This is enough to make scripts executable from the command "
"prompt as 'foo.py'.  If you'd rather be able to execute the script by simple"
" typing 'foo' with no extension you need to add .py to the PATHEXT "
"environment variable."
msgstr ""
"Di Windows, standar penginstal Python sudah diasosiasikan dengan .py "
"ekstensi dengan tipe file (Python.File) dan memberikan tipe file tersebut "
"untuk membuka command yang menjalankan interpreter (``D:\\Program "
"Files\\Python\\python.exe \"%1\" %*``). Ini cukup untuk membuat skrip dapat "
"dieksekusi dari perintah simpel dengan mengketik 'foo' tanpa ekstensi yang "
"perlu Anda tambahkan .py di PATHEXT environment variable."

#: ../../faq/windows.rst:124
msgid "Why does Python sometimes take so long to start?"
msgstr "Mengapa Python terkadang membutuhkan waktu lama untuk memulai?"

#: ../../faq/windows.rst:126
msgid ""
"Usually Python starts very quickly on Windows, but occasionally there are "
"bug reports that Python suddenly begins to take a long time to start up.  "
"This is made even more puzzling because Python will work fine on other "
"Windows systems which appear to be configured identically."
msgstr ""
"Biasanya, Python terbuka sangat cepat di Windows, tetapi terkadang ada "
"laporan bug bahwa Python tiba-tiba mulai membutuhkan waktu lama untuk "
"memulai. Ini menjadi lebih membingungkan karena Python akan berfungsi dengan"
" baik pada Windows sistem yang lain yang mana secara identikal "
"terkonfigurasi."

#: ../../faq/windows.rst:131
msgid ""
"The problem may be caused by a misconfiguration of virus checking software "
"on the problem machine.  Some virus scanners have been known to introduce "
"startup overhead of two orders of magnitude when the scanner is configured "
"to monitor all reads from the filesystem.  Try checking the configuration of"
" virus scanning software on your systems to ensure that they are indeed "
"configured identically. McAfee, when configured to scan all file system read"
" activity, is a particular offender."
msgstr ""
"Masalahnya mungkin disebabkan oleh kesalahan konfigurasi perangkat lunak "
"pemeriksaan virus di mesin masalah. Beberapa pemindai virus telah diketahui "
"memperkenalkan overhead startup dua kali lipat saat pemindai dikonfigurasi "
"untuk memantau semua pembacaan dari sistem file. Coba periksa konfigurasi "
"dari perangkat lunak pemindaian virus pada sistem Anda untuk memastikan "
"bahwa perangkat memang benar terkonfigurasi secara identik. McAfee, ketika "
"dikonfigurasi untuk memindai semua aktivitas baca dari sistem file "
"aktivitas, adalah pelaku tertentu."

#: ../../faq/windows.rst:141
msgid "How do I make an executable from a Python script?"
msgstr "Bagaimana cara membuat sebuah executable dari skrip Python?"

#: ../../faq/windows.rst:143
msgid ""
"See :ref:`faq-create-standalone-binary` for a list of tools that can be used"
" to make executables."
msgstr ""
"Lihat :ref:`faq-create-standalone-binary` untuk daftar perkakas yang dapat "
"digunakan membuat aplikasi yang dapat dieksekusi."

#: ../../faq/windows.rst:148
msgid "Is a ``*.pyd`` file the same as a DLL?"
msgstr "Apakah file ``*.pyd`` sama dengan DLL?"

#: ../../faq/windows.rst:150
msgid ""
"Yes, .pyd files are dll's, but there are a few differences.  If you have a "
"DLL named ``foo.pyd``, then it must have a function ``PyInit_foo()``.  You "
"can then write Python \"import foo\", and Python will search for foo.pyd (as"
" well as foo.py, foo.pyc) and if it finds it, will attempt to call "
"``PyInit_foo()`` to initialize it.  You do not link your .exe with foo.lib, "
"as that would cause Windows to require the DLL to be present."
msgstr ""
"Ya, .pyd file merupakan bagian dari dll, tapi dengan sedikit perbedaan. Jika"
" kamu mempunyai DLL bernama ``foo.pyd``, kana itu pasti sebuah fungsi dari "
"``PyInit_foo()``. Anda dapat menulis Python \"import foo\", dan Python akan "
"mencari untuk foo.pyd(dan juga foo.py, foo.pyc) dan jika itu ditemukan, maka"
" akan memanggil ``PyInit_foo()`` untuk segera diinisalisasikan. Anda tidak "
"menautkan .exe Anda dengan foo.lib, karena hal itu akan menyebabkan Windows "
"memerlukan DLL."

#: ../../faq/windows.rst:157
msgid ""
"Note that the search path for foo.pyd is PYTHONPATH, not the same as the "
"path that Windows uses to search for foo.dll.  Also, foo.pyd need not be "
"present to run your program, whereas if you linked your program with a dll, "
"the dll is required.  Of course, foo.pyd is required if you want to say "
"``import foo``.  In a DLL, linkage is declared in the source code with "
"``__declspec(dllexport)``. In a .pyd, linkage is defined in a list of "
"available functions."
msgstr ""
"Perhatikan bahwa jalur pencarian untuk foo.pyd adalah PYTHONPATH, tidak sama"
" dengan jalur yang digunakan Windows untuk mencari foo.dll. Selain itu, "
"foo.pyd tidak perlu hadir untuk menjalankan program Anda, sedangkan jika "
"Anda menautkan program Anda dengan dll, dll diperlukan. Tentu saja, foo.pyd "
"diperlukan jika Anda ingin mengatakannya ``import foo``. Di file DLL, "
"keterkaitan dideklarasikan dalam kode sumber dengan "
"``__declspec(dllexport)``. Di file .pyd, keterkaitan didefinisikan sebagai "
"sebuah list dari fungsi yang tersedia."

#: ../../faq/windows.rst:166
msgid "How can I embed Python into a Windows application?"
msgstr "Bagaimana cara memasukkan Python ke dalam aplikasi Windows?"

#: ../../faq/windows.rst:168
msgid ""
"Embedding the Python interpreter in a Windows app can be summarized as "
"follows:"
msgstr ""
"Menyematkan interpreter Python di aplikasi Windows dapat diringkas menjadi "
"sebagai:"

#: ../../faq/windows.rst:170
msgid ""
"Do _not_ build Python into your .exe file directly.  On Windows, Python must"
" be a DLL to handle importing modules that are themselves DLL's.  (This is "
"the first key undocumented fact.)  Instead, link to :file:`python{NN}.dll`; "
"it is typically installed in ``C:\\Windows\\System``.  *NN* is the Python "
"version, a number such as \"33\" for Python 3.3."
msgstr ""
"Jangan buat Python Anda langsung ke dalam .exe. Di Windows, Python harus "
"menjadi DLL untuk menangani modul impor yang merupakan DLL itu sendiri. (Ini"
" adalahfakta kunci pertama yang tidak terdokumentasi.) Sebagai gantinya, "
"tautkan ke :file:`python{NN}.dll`; itu biasanya dipasang di "
"``C:\\Windows\\System``. *NN* adalah Python versi, angka seperti \"33\" "
"untuk Python 3.3."

#: ../../faq/windows.rst:176
msgid ""
"You can link to Python in two different ways.  Load-time linking means "
"linking against :file:`python{NN}.lib`, while run-time linking means linking"
" against :file:`python{NN}.dll`.  (General note: :file:`python{NN}.lib` is "
"the so-called \"import lib\" corresponding to :file:`python{NN}.dll`.  It "
"merely defines symbols for the linker.)"
msgstr ""
"Anda dapat menautkan ke Python dengan dua cara berbeda. Alat penautan waktu "
"muat menautkan ke :file:`python{NN}.lib`, sedangkan penautan run-time "
"berarti menautkan kedalam :file:`python{NN}.dll`. (Catatan umum: "
":file:`python{NN}.lib` adalah file yang disebut dengan \"import lib\" sesuai"
" dengan :file:`python{NN}.dll`. itu hanya mendefinisikan simbol untuk "
"linker.)"

#: ../../faq/windows.rst:182
msgid ""
"Run-time linking greatly simplifies link options; everything happens at run "
"time.  Your code must load :file:`python{NN}.dll` using the Windows "
"``LoadLibraryEx()`` routine.  The code must also use access routines and "
"data in :file:`python{NN}.dll` (that is, Python's C API's) using pointers "
"obtained by the Windows ``GetProcAddress()`` routine.  Macros can make using"
" these pointers transparent to any C code that calls routines in Python's C "
"API."
msgstr ""
"Tautan run-time sangat menyederhanakan opsi tautan; semuanya terjadi saat "
"runtime. Kode anda harus dibuka :file:`python{NN}.dll` dengan menggunakan "
"Windows ``LoadLibraryEx()``. Kode juga harus menggunakan rutinitas akses dan"
" data di :file:`python{NN}.dll` (yaitu, C API Python) menggunakan pointer "
"yang didapatkan dari Windows ``GetProcAddress()``. Makro dapat dibuat dengan"
" menggunakan pointer tersebut ke kode C apapun yang memanggil rutinitas di C"
" Python API."

#: ../../faq/windows.rst:189
msgid ""
"Borland note: convert :file:`python{NN}.lib` to OMF format using "
"Coff2Omf.exe first."
msgstr ""
"Catatan Borland: ubah :file:`python{NN}.lib` ke format OMF menggunakan "
"Coff20mf.exe terlebih dahulu."

#: ../../faq/windows.rst:194
msgid ""
"If you use SWIG, it is easy to create a Python \"extension module\" that "
"will make the app's data and methods available to Python.  SWIG will handle "
"just about all the grungy details for you.  The result is C code that you "
"link *into* your .exe file (!)  You do _not_ have to create a DLL file, and "
"this also simplifies linking."
msgstr ""
"Jika Anda menggunakan SWIG, mudah untuk membuat \"modul ekstensi\" Python "
"dan hal itu akan membuat data di aplikasi dan metode yang tersedia ke "
"Python. SWIG juga akan menangani tentang semua detail kumuh untuk Anda. "
"Hasilnya adalah kode C Anda yang terkaitkan ke .exe file Anda (!)  Kamu "
"tidak perlu membuat sebuah file DLL, dan ini juga memudahkan proses linking."

#: ../../faq/windows.rst:200
msgid ""
"SWIG will create an init function (a C function) whose name depends on the "
"name of the extension module.  For example, if the name of the module is "
"leo, the init function will be called initleo().  If you use SWIG shadow "
"classes, as you should, the init function will be called initleoc().  This "
"initializes a mostly hidden helper class used by the shadow class."
msgstr ""
"SWIG akan membuat fungsi init (fungsi C) yang namanya bergantung pada nama "
"modul ekstensi. Misalnya, jika nama modulnya adalah leo, fungsi init akan "
"dipanggil initleo(). Jika Anda menggunakan bayangan SWIG kelas, sebagaimana "
"seharusnya, fungsi init akan dipanggil initleoc(). Ini menginisialisasi "
"kelas pembantu yang sebagian besar tersembunyi yang digunakan oleh kelas "
"bayangan."

#: ../../faq/windows.rst:206
msgid ""
"The reason you can link the C code in step 2 into your .exe file is that "
"calling the initialization function is equivalent to importing the module "
"into Python! (This is the second key undocumented fact.)"
msgstr ""
"Alasan Anda dapat menautkan kode C pada langkah 2 ke file .exe Anda adalah "
"itu memanggil fungsi inisialisasi sama dengan mengimpor modul ke dalam "
"Python! (Ini adalah fakta kunci tak terdokumentasi kedua.)"

#: ../../faq/windows.rst:210
msgid ""
"In short, you can use the following code to initialize the Python "
"interpreter with your extension module."
msgstr ""
"Singkatnya, Anda dapat menggunakan kode berikut untuk menginisialisasi "
"Python interpreter dengan ekstensi modul Anda."

#: ../../faq/windows.rst:221
msgid ""
"There are two problems with Python's C API which will become apparent if you"
" use a compiler other than MSVC, the compiler used to build pythonNN.dll."
msgstr ""
"Ada dua masalah dengan C API Python yang akan terlihat jika Andamenggunakan "
"kompilator selain MSVC, kompilator yang digunakan untuk membangun "
"pythonNN.dll."

#: ../../faq/windows.rst:224
msgid ""
"Problem 1: The so-called \"Very High Level\" functions that take FILE * "
"arguments will not work in a multi-compiler environment because each "
"compiler's notion of a struct FILE will be different.  From an "
"implementation standpoint these are very _low_ level functions."
msgstr ""
"Masalah 1: Yang disebut dengan \"Very High Level\" fungsi yang mengambil "
"FILE * argumen tidak akan berfungsi di lingkungan multi-kompilator karena "
"masing-masing Gagasan kompiler tentang struct FILE akan berbeda. Dari sebuah"
" sudut pandang implementasi ini adalah fungsi level yang sangat _low_."

#: ../../faq/windows.rst:229
msgid ""
"Problem 2: SWIG generates the following code when generating wrappers to "
"void functions:"
msgstr ""
"Masalah 2: SWIG menghasilkan kode berikut saat membuat wrappers ke dalam "
"fungsi void:"

#: ../../faq/windows.rst:238
msgid ""
"Alas, Py_None is a macro that expands to a reference to a complex data "
"structure called _Py_NoneStruct inside pythonNN.dll.  Again, this code will "
"fail in a mult-compiler environment.  Replace such code by:"
msgstr ""
"Sayangnya, Py_None adalah makro yang meluas ke referensi ke data kompleks "
"struktur yang disebut _Py_NoneStruct di dalam pythonNN.dll. Sekali lagi, "
"kode ini akan gagal di lingkungan mult-compiler. Ganti kode tersebut dengan:"

#: ../../faq/windows.rst:246
msgid ""
"It may be possible to use SWIG's ``%typemap`` command to make the change "
"automatically, though I have not been able to get this to work (I'm a "
"complete SWIG newbie)."
msgstr ""
"Dimungkinkan untuk menggunakan perintah ``%typemap`` SWIG untuk membuat "
"perubahan secara otomatis, meskipun saya belum bisa membuat ini berfungsi "
"(saya adalah pemula SWIG)."

#: ../../faq/windows.rst:250
msgid ""
"Using a Python shell script to put up a Python interpreter window from "
"inside your Windows app is not a good idea; the resulting window will be "
"independent of your app's windowing system.  Rather, you (or the "
"wxPythonWindow class) should create a \"native\" interpreter window.  It is "
"easy to connect that window to the Python interpreter.  You can redirect "
"Python's i/o to _any_ object that supports read and write, so all you need "
"is a Python object (defined in your extension module) that contains read() "
"and write() methods."
msgstr ""
"Menggunakan skrip shell Python untuk memasang jendela interpreter Python di "
"dalam aplikasi Windows Anda bukanlah ide yang bagus; jendela yang dihasilkan"
" akan menjadi terlepas dari sistem windowing aplikasi Anda. Sebaliknya, Anda"
" (atau wxPythonWindow) harus membuat jendela penerjemah \"native\". ini "
"mudah untuk menghubungkan jendela itu ke interpreter Python. Anda dapat "
"mengalihkan Objek i/o ke _any_ Python yang mendukung baca dan tulis, jadi "
"semua yang Anda butuhkan adalah objek Python (didefinisikan dalam modul "
"ekstensi Anda) yang berisi metode read() dan write()."

#: ../../faq/windows.rst:259
msgid "How do I keep editors from inserting tabs into my Python source?"
msgstr ""
"Bagaimana cara mencegah editor memasukkan tab ke dalam sumber Python saya?"

#: ../../faq/windows.rst:261
msgid ""
"The FAQ does not recommend using tabs, and the Python style guide, :pep:`8`,"
" recommends 4 spaces for distributed Python code; this is also the Emacs "
"python-mode default."
msgstr ""
"FAQ tidak merekomendasikan penggunaan tab, dan panduan gaya Python, "
":pep:`8`, merekomendasikan dengan 4 spasi untuk distribusi kode Python; ini "
"juga Emacs python-mode secara default."

#: ../../faq/windows.rst:265
msgid ""
"Under any editor, mixing tabs and spaces is a bad idea.  MSVC is no "
"different in this respect, and is easily configured to use spaces: Take "
":menuselection:`Tools --> Options --> Tabs`, and for file type \"Default\" "
"set \"Tab size\" and \"Indent size\" to 4, and select the \"Insert spaces\" "
"radio button."
msgstr ""
"Di bawah editor apa pun, mencampur tab dan spasi adalah ide yang buruk. MSVC"
" adalah berbeda dalam hal ini, dan mudah dikonfigurasi untuk menggunakan "
"spasi: Ambil :menuselection:`Tools --> Options --> Tabs`, dan untuk file "
"tipe \"Default\" set \"Tab size\" dan \"Indent size\" menjadi 4, dan pilih "
"\"Insert spaces\" tombol radio."

#: ../../faq/windows.rst:270
msgid ""
"Python raises :exc:`IndentationError` or :exc:`TabError` if mixed tabs and "
"spaces are causing problems in leading whitespace. You may also run the "
":mod:`tabnanny` module to check a directory tree in batch mode."
msgstr ""
"Python akan memunculkan :exc:`IndentationError` atau :exc:`TabError` jika "
"terdapat gabugan antaratabs dan spasi yang menyebabkan masalah dalam spasi. "
"Anda juga dapat menjalankan :mod:`tabnanny` modul untuk mengecek sebuah "
"direktori di mode batch."

#: ../../faq/windows.rst:277
msgid "How do I check for a keypress without blocking?"
msgstr "Bagaimana cara memeriksa tombol yang ditekan tanpa memblokir?"

#: ../../faq/windows.rst:279
msgid ""
"Use the :mod:`msvcrt` module.  This is a standard Windows-specific extension"
" module. It defines a function ``kbhit()`` which checks whether a keyboard "
"hit is present, and ``getch()`` which gets one character without echoing it."
msgstr ""
"Gunakan modul msvcrt. Ini adalah ekstensi khusus Windows standar modul. Ini "
"mendefinisikan fungsi ``kbhit()`` yang memeriksa apakah keyboard menekan, "
"dan ``getch()`` yang mendapat satu karakter tanpa mengulanginya."
