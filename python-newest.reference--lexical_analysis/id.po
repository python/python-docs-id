# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Imaduddin A Majid <imaduddinamajid@gmail.com>, 2023
# oon arfiandwi <oon.arfiandwi@gmail.com>, 2023
# Ahmad Mustafid, 2024
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2021-06-28 01:49+0000\n"
"Last-Translator: Ahmad Mustafid, 2024\n"
"Language-Team: Indonesian (https://app.transifex.com/python-doc/teams/5390/id/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: id\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../reference/lexical_analysis.rst:6
msgid "Lexical analysis"
msgstr ""

#: ../../reference/lexical_analysis.rst:10
msgid ""
"A Python program is read by a *parser*.  Input to the parser is a stream of "
":term:`tokens <token>`, generated by the *lexical analyzer* (also known as "
"the *tokenizer*). This chapter describes how the lexical analyzer breaks a "
"file into tokens."
msgstr ""

#: ../../reference/lexical_analysis.rst:15
msgid ""
"Python reads program text as Unicode code points; the encoding of a source "
"file can be given by an encoding declaration and defaults to UTF-8, see "
":pep:`3120` for details.  If the source file cannot be decoded, a "
":exc:`SyntaxError` is raised."
msgstr ""

#: ../../reference/lexical_analysis.rst:24
msgid "Line structure"
msgstr ""

#: ../../reference/lexical_analysis.rst:28
msgid "A Python program is divided into a number of *logical lines*."
msgstr ""

#: ../../reference/lexical_analysis.rst:34
msgid "Logical lines"
msgstr ""

#: ../../reference/lexical_analysis.rst:38
msgid ""
"The end of a logical line is represented by the token "
":data:`~token.NEWLINE`. Statements cannot cross logical line boundaries "
"except where :data:`!NEWLINE` is allowed by the syntax (e.g., between "
"statements in compound statements). A logical line is constructed from one "
"or more *physical lines* by following the explicit or implicit *line "
"joining* rules."
msgstr ""

#: ../../reference/lexical_analysis.rst:48
msgid "Physical lines"
msgstr ""

#: ../../reference/lexical_analysis.rst:50
msgid ""
"A physical line is a sequence of characters terminated by an end-of-line "
"sequence.  In source files and strings, any of the standard platform line "
"termination sequences can be used - the Unix form using ASCII LF (linefeed),"
" the Windows form using the ASCII sequence CR LF (return followed by "
"linefeed), or the old Macintosh form using the ASCII CR (return) character."
"  All of these forms can be used equally, regardless of platform. The end of"
" input also serves as an implicit terminator for the final physical line."
msgstr ""

#: ../../reference/lexical_analysis.rst:58
msgid ""
"When embedding Python, source code strings should be passed to Python APIs "
"using the standard C conventions for newline characters (the ``\\n`` "
"character, representing ASCII LF, is the line terminator)."
msgstr ""

#: ../../reference/lexical_analysis.rst:66
msgid "Comments"
msgstr ""

#: ../../reference/lexical_analysis.rst:71
msgid ""
"A comment starts with a hash character (``#``) that is not part of a string "
"literal, and ends at the end of the physical line.  A comment signifies the "
"end of the logical line unless the implicit line joining rules are invoked. "
"Comments are ignored by the syntax."
msgstr ""

#: ../../reference/lexical_analysis.rst:80
msgid "Encoding declarations"
msgstr ""

#: ../../reference/lexical_analysis.rst:85
msgid ""
"If a comment in the first or second line of the Python script matches the "
"regular expression ``coding[=:]\\s*([-\\w.]+)``, this comment is processed "
"as an encoding declaration; the first group of this expression names the "
"encoding of the source code file. The encoding declaration must appear on a "
"line of its own. If it is the second line, the first line must also be a "
"comment-only line. The recommended forms of an encoding expression are ::"
msgstr ""

#: ../../reference/lexical_analysis.rst:92
msgid "# -*- coding: <encoding-name> -*-"
msgstr ""

#: ../../reference/lexical_analysis.rst:94
msgid "which is recognized also by GNU Emacs, and ::"
msgstr ""

#: ../../reference/lexical_analysis.rst:96
msgid "# vim:fileencoding=<encoding-name>"
msgstr ""

#: ../../reference/lexical_analysis.rst:98
msgid "which is recognized by Bram Moolenaar's VIM."
msgstr ""

#: ../../reference/lexical_analysis.rst:100
msgid ""
"If no encoding declaration is found, the default encoding is UTF-8.  If the "
"implicit or explicit encoding of a file is UTF-8, an initial UTF-8 byte-"
"order mark (``b'\\xef\\xbb\\xbf'``) is ignored rather than being a syntax "
"error."
msgstr ""

#: ../../reference/lexical_analysis.rst:104
msgid ""
"If an encoding is declared, the encoding name must be recognized by Python "
"(see :ref:`standard-encodings`). The encoding is used for all lexical "
"analysis, including string literals, comments and identifiers."
msgstr ""

#: ../../reference/lexical_analysis.rst:113
msgid "Explicit line joining"
msgstr ""

#: ../../reference/lexical_analysis.rst:117
msgid ""
"Two or more physical lines may be joined into logical lines using backslash "
"characters (``\\``), as follows: when a physical line ends in a backslash "
"that is not part of a string literal or comment, it is joined with the "
"following forming a single logical line, deleting the backslash and the "
"following end-of-line character.  For example::"
msgstr ""

#: ../../reference/lexical_analysis.rst:123
msgid ""
"if 1900 < year < 2100 and 1 <= month <= 12 \\\n"
"   and 1 <= day <= 31 and 0 <= hour < 24 \\\n"
"   and 0 <= minute < 60 and 0 <= second < 60:   # Looks like a valid date\n"
"        return 1"
msgstr ""

#: ../../reference/lexical_analysis.rst:128
msgid ""
"A line ending in a backslash cannot carry a comment.  A backslash does not "
"continue a comment.  A backslash does not continue a token except for string"
" literals (i.e., tokens other than string literals cannot be split across "
"physical lines using a backslash).  A backslash is illegal elsewhere on a "
"line outside a string literal."
msgstr ""

#: ../../reference/lexical_analysis.rst:138
msgid "Implicit line joining"
msgstr ""

#: ../../reference/lexical_analysis.rst:140
msgid ""
"Expressions in parentheses, square brackets or curly braces can be split "
"over more than one physical line without using backslashes. For example::"
msgstr ""

#: ../../reference/lexical_analysis.rst:143
msgid ""
"month_names = ['Januari', 'Februari', 'Maart',      # These are the\n"
"               'April',   'Mei',      'Juni',       # Dutch names\n"
"               'Juli',    'Augustus', 'September',  # for the months\n"
"               'Oktober', 'November', 'December']   # of the year"
msgstr ""

#: ../../reference/lexical_analysis.rst:148
msgid ""
"Implicitly continued lines can carry comments.  The indentation of the "
"continuation lines is not important.  Blank continuation lines are allowed. "
"There is no NEWLINE token between implicit continuation lines.  Implicitly "
"continued lines can also occur within triple-quoted strings (see below); in "
"that case they cannot carry comments."
msgstr ""

#: ../../reference/lexical_analysis.rst:158
msgid "Blank lines"
msgstr ""

#: ../../reference/lexical_analysis.rst:162
msgid ""
"A logical line that contains only spaces, tabs, formfeeds and possibly a "
"comment, is ignored (i.e., no :data:`~token.NEWLINE` token is generated). "
"During interactive input of statements, handling of a blank line may differ "
"depending on the implementation of the read-eval-print loop. In the standard"
" interactive interpreter, an entirely blank logical line (that is, one "
"containing not even whitespace or a comment) terminates a multi-line "
"statement."
msgstr ""

#: ../../reference/lexical_analysis.rst:174
msgid "Indentation"
msgstr ""

#: ../../reference/lexical_analysis.rst:178
msgid ""
"Leading whitespace (spaces and tabs) at the beginning of a logical line is "
"used to compute the indentation level of the line, which in turn is used to "
"determine the grouping of statements."
msgstr ""

#: ../../reference/lexical_analysis.rst:182
msgid ""
"Tabs are replaced (from left to right) by one to eight spaces such that the "
"total number of characters up to and including the replacement is a multiple"
" of eight (this is intended to be the same rule as used by Unix).  The total"
" number of spaces preceding the first non-blank character then determines "
"the line's indentation.  Indentation cannot be split over multiple physical "
"lines using backslashes; the whitespace up to the first backslash determines"
" the indentation."
msgstr ""

#: ../../reference/lexical_analysis.rst:190
msgid ""
"Indentation is rejected as inconsistent if a source file mixes tabs and "
"spaces in a way that makes the meaning dependent on the worth of a tab in "
"spaces; a :exc:`TabError` is raised in that case."
msgstr ""

#: ../../reference/lexical_analysis.rst:194
msgid ""
"**Cross-platform compatibility note:** because of the nature of text editors"
" on non-UNIX platforms, it is unwise to use a mixture of spaces and tabs for"
" the indentation in a single source file.  It should also be noted that "
"different platforms may explicitly limit the maximum indentation level."
msgstr ""

#: ../../reference/lexical_analysis.rst:199
msgid ""
"A formfeed character may be present at the start of the line; it will be "
"ignored for the indentation calculations above.  Formfeed characters "
"occurring elsewhere in the leading whitespace have an undefined effect (for "
"instance, they may reset the space count to zero)."
msgstr ""

#: ../../reference/lexical_analysis.rst:206
msgid ""
"The indentation levels of consecutive lines are used to generate "
":data:`~token.INDENT` and :data:`~token.DEDENT` tokens, using a stack, as "
"follows."
msgstr ""

#: ../../reference/lexical_analysis.rst:210
msgid ""
"Before the first line of the file is read, a single zero is pushed on the "
"stack; this will never be popped off again.  The numbers pushed on the stack"
" will always be strictly increasing from bottom to top.  At the beginning of"
" each logical line, the line's indentation level is compared to the top of "
"the stack. If it is equal, nothing happens. If it is larger, it is pushed on"
" the stack, and one :data:`!INDENT` token is generated.  If it is smaller, "
"it *must* be one of the numbers occurring on the stack; all numbers on the "
"stack that are larger are popped off, and for each number popped off a "
":data:`!DEDENT` token is generated. At the end of the file, a "
":data:`!DEDENT` token is generated for each number remaining on the stack "
"that is larger than zero."
msgstr ""

#: ../../reference/lexical_analysis.rst:221
msgid ""
"Here is an example of a correctly (though confusingly) indented piece of "
"Python code::"
msgstr ""

#: ../../reference/lexical_analysis.rst:224
msgid ""
"def perm(l):\n"
"        # Compute the list of all permutations of l\n"
"    if len(l) <= 1:\n"
"                  return [l]\n"
"    r = []\n"
"    for i in range(len(l)):\n"
"             s = l[:i] + l[i+1:]\n"
"             p = perm(s)\n"
"             for x in p:\n"
"              r.append(l[i:i+1] + x)\n"
"    return r"
msgstr ""

#: ../../reference/lexical_analysis.rst:236
msgid "The following example shows various indentation errors::"
msgstr ""

#: ../../reference/lexical_analysis.rst:238
msgid ""
" def perm(l):                       # error: first line indented\n"
"for i in range(len(l)):             # error: not indented\n"
"    s = l[:i] + l[i+1:]\n"
"        p = perm(l[:i] + l[i+1:])   # error: unexpected indent\n"
"        for x in p:\n"
"                r.append(l[i:i+1] + x)\n"
"            return r                # error: inconsistent dedent"
msgstr ""

#: ../../reference/lexical_analysis.rst:246
msgid ""
"(Actually, the first three errors are detected by the parser; only the last "
"error is found by the lexical analyzer --- the indentation of ``return r`` "
"does not match a level popped off the stack.)"
msgstr ""

#: ../../reference/lexical_analysis.rst:254
msgid "Whitespace between tokens"
msgstr ""

#: ../../reference/lexical_analysis.rst:256
msgid ""
"Except at the beginning of a logical line or in string literals, the "
"whitespace characters space, tab and formfeed can be used interchangeably to"
" separate tokens.  Whitespace is needed between two tokens only if their "
"concatenation could otherwise be interpreted as a different token. For "
"example, ``ab`` is one token, but ``a b`` is two tokens. However, ``+a`` and"
" ``+ a`` both produce two tokens, ``+`` and ``a``, as ``+a`` is not a valid "
"token."
msgstr ""

#: ../../reference/lexical_analysis.rst:267
msgid "End marker"
msgstr ""

#: ../../reference/lexical_analysis.rst:269
msgid ""
"At the end of non-interactive input, the lexical analyzer generates an "
":data:`~token.ENDMARKER` token."
msgstr ""

#: ../../reference/lexical_analysis.rst:276
msgid "Other tokens"
msgstr ""

#: ../../reference/lexical_analysis.rst:278
msgid ""
"Besides :data:`~token.NEWLINE`, :data:`~token.INDENT` and "
":data:`~token.DEDENT`, the following categories of tokens exist: "
"*identifiers* and *keywords* (:data:`~token.NAME`), *literals* (such as "
":data:`~token.NUMBER` and :data:`~token.STRING`), and other symbols "
"(*operators* and *delimiters*, :data:`~token.OP`). Whitespace characters "
"(other than logical line terminators, discussed earlier) are not tokens, but"
" serve to delimit tokens. Where ambiguity exists, a token comprises the "
"longest possible string that forms a legal token, when read from left to "
"right."
msgstr ""

#: ../../reference/lexical_analysis.rst:292
msgid "Identifiers and keywords"
msgstr ""

#: ../../reference/lexical_analysis.rst:296
msgid ""
"Identifiers (also referred to as *names*) are described by the following "
"lexical definitions."
msgstr ""

#: ../../reference/lexical_analysis.rst:299
msgid ""
"The syntax of identifiers in Python is based on the Unicode standard annex "
"UAX-31, with elaboration and changes as defined below; see also :pep:`3131` "
"for further details."
msgstr ""

#: ../../reference/lexical_analysis.rst:303
msgid ""
"Within the ASCII range (U+0001..U+007F), the valid characters for "
"identifiers include the uppercase and lowercase letters ``A`` through ``Z``,"
" the underscore ``_`` and, except for the first character, the digits ``0`` "
"through ``9``. Python 3.0 introduced additional characters from outside the "
"ASCII range (see :pep:`3131`).  For these characters, the classification "
"uses the version of the Unicode Character Database as included in the "
":mod:`unicodedata` module."
msgstr ""

#: ../../reference/lexical_analysis.rst:311
msgid "Identifiers are unlimited in length.  Case is significant."
msgstr ""

#: ../../reference/lexical_analysis.rst:320
msgid "The Unicode category codes mentioned above stand for:"
msgstr ""

#: ../../reference/lexical_analysis.rst:322
msgid "*Lu* - uppercase letters"
msgstr ""

#: ../../reference/lexical_analysis.rst:323
msgid "*Ll* - lowercase letters"
msgstr ""

#: ../../reference/lexical_analysis.rst:324
msgid "*Lt* - titlecase letters"
msgstr ""

#: ../../reference/lexical_analysis.rst:325
msgid "*Lm* - modifier letters"
msgstr ""

#: ../../reference/lexical_analysis.rst:326
msgid "*Lo* - other letters"
msgstr ""

#: ../../reference/lexical_analysis.rst:327
msgid "*Nl* - letter numbers"
msgstr ""

#: ../../reference/lexical_analysis.rst:328
msgid "*Mn* - nonspacing marks"
msgstr ""

#: ../../reference/lexical_analysis.rst:329
msgid "*Mc* - spacing combining marks"
msgstr ""

#: ../../reference/lexical_analysis.rst:330
msgid "*Nd* - decimal numbers"
msgstr ""

#: ../../reference/lexical_analysis.rst:331
msgid "*Pc* - connector punctuations"
msgstr ""

#: ../../reference/lexical_analysis.rst:332
msgid ""
"*Other_ID_Start* - explicit list of characters in `PropList.txt "
"<https://www.unicode.org/Public/16.0.0/ucd/PropList.txt>`_ to support "
"backwards compatibility"
msgstr ""

#: ../../reference/lexical_analysis.rst:335
msgid "*Other_ID_Continue* - likewise"
msgstr ""

#: ../../reference/lexical_analysis.rst:337
msgid ""
"All identifiers are converted into the normal form NFKC while parsing; "
"comparison of identifiers is based on NFKC."
msgstr ""

#: ../../reference/lexical_analysis.rst:340
msgid ""
"A non-normative HTML file listing all valid identifier characters for "
"Unicode 16.0.0 can be found at "
"https://www.unicode.org/Public/16.0.0/ucd/DerivedCoreProperties.txt"
msgstr ""

#: ../../reference/lexical_analysis.rst:348
msgid "Keywords"
msgstr ""

#: ../../reference/lexical_analysis.rst:354
msgid ""
"The following identifiers are used as reserved words, or *keywords* of the "
"language, and cannot be used as ordinary identifiers.  They must be spelled "
"exactly as written here:"
msgstr ""

#: ../../reference/lexical_analysis.rst:358
msgid ""
"False      await      else       import     pass\n"
"None       break      except     in         raise\n"
"True       class      finally    is         return\n"
"and        continue   for        lambda     try\n"
"as         def        from       nonlocal   while\n"
"assert     del        global     not        with\n"
"async      elif       if         or         yield"
msgstr ""

#: ../../reference/lexical_analysis.rst:372
msgid "Soft Keywords"
msgstr ""

#: ../../reference/lexical_analysis.rst:378
msgid ""
"Some identifiers are only reserved under specific contexts. These are known "
"as *soft keywords*.  The identifiers ``match``, ``case``, ``type`` and ``_``"
" can syntactically act as keywords in certain contexts, but this distinction"
" is done at the parser level, not when tokenizing."
msgstr ""

#: ../../reference/lexical_analysis.rst:383
msgid ""
"As soft keywords, their use in the grammar is possible while still "
"preserving compatibility with existing code that uses these names as "
"identifier names."
msgstr ""

#: ../../reference/lexical_analysis.rst:387
msgid ""
"``match``, ``case``, and ``_`` are used in the :keyword:`match` statement. "
"``type`` is used in the :keyword:`type` statement."
msgstr ""

#: ../../reference/lexical_analysis.rst:390
msgid "``type`` is now a soft keyword."
msgstr ""

#: ../../reference/lexical_analysis.rst:399
msgid "Reserved classes of identifiers"
msgstr ""

#: ../../reference/lexical_analysis.rst:401
msgid ""
"Certain classes of identifiers (besides keywords) have special meanings.  "
"These classes are identified by the patterns of leading and trailing "
"underscore characters:"
msgstr ""

#: ../../reference/lexical_analysis.rst:405
msgid "``_*``"
msgstr ""

#: ../../reference/lexical_analysis.rst:406
msgid "Not imported by ``from module import *``."
msgstr ""

#: ../../reference/lexical_analysis.rst:408
msgid "``_``"
msgstr ""

#: ../../reference/lexical_analysis.rst:409
msgid ""
"In a ``case`` pattern within a :keyword:`match` statement, ``_`` is a "
":ref:`soft keyword <soft-keywords>` that denotes a :ref:`wildcard <wildcard-"
"patterns>`."
msgstr ""

#: ../../reference/lexical_analysis.rst:413
msgid ""
"Separately, the interactive interpreter makes the result of the last "
"evaluation available in the variable ``_``. (It is stored in the "
":mod:`builtins` module, alongside built-in functions like ``print``.)"
msgstr ""

#: ../../reference/lexical_analysis.rst:418
msgid ""
"Elsewhere, ``_`` is a regular identifier. It is often used to name "
"\"special\" items, but it is not special to Python itself."
msgstr ""

#: ../../reference/lexical_analysis.rst:423
msgid ""
"The name ``_`` is often used in conjunction with internationalization; refer"
" to the documentation for the :mod:`gettext` module for more information on "
"this convention."
msgstr ""

#: ../../reference/lexical_analysis.rst:427
msgid "It is also commonly used for unused variables."
msgstr ""

#: ../../reference/lexical_analysis.rst:429
msgid "``__*__``"
msgstr ""

#: ../../reference/lexical_analysis.rst:430
msgid ""
"System-defined names, informally known as \"dunder\" names. These names are "
"defined by the interpreter and its implementation (including the standard "
"library). Current system names are discussed in the :ref:`specialnames` "
"section and elsewhere. More will likely be defined in future versions of "
"Python.  *Any* use of ``__*__`` names, in any context, that does not follow "
"explicitly documented use, is subject to breakage without warning."
msgstr ""

#: ../../reference/lexical_analysis.rst:437
msgid "``__*``"
msgstr ""

#: ../../reference/lexical_analysis.rst:438
msgid ""
"Class-private names.  Names in this category, when used within the context "
"of a class definition, are re-written to use a mangled form to help avoid "
"name clashes between \"private\" attributes of base and derived classes. See"
" section :ref:`atom-identifiers`."
msgstr ""

#: ../../reference/lexical_analysis.rst:447
msgid "Literals"
msgstr ""

#: ../../reference/lexical_analysis.rst:451
msgid "Literals are notations for constant values of some built-in types."
msgstr ""

#: ../../reference/lexical_analysis.rst:462
msgid "String and Bytes literals"
msgstr ""

#: ../../reference/lexical_analysis.rst:464
msgid "String literals are described by the following lexical definitions:"
msgstr ""

#: ../../reference/lexical_analysis.rst:489
msgid ""
"One syntactic restriction not indicated by these productions is that "
"whitespace is not allowed between the :token:`~python-grammar:stringprefix` "
"or :token:`~python-grammar:bytesprefix` and the rest of the literal. The "
"source character set is defined by the encoding declaration; it is UTF-8 if "
"no encoding declaration is given in the source file; see section "
":ref:`encodings`."
msgstr ""

#: ../../reference/lexical_analysis.rst:499
msgid ""
"In plain English: Both types of literals can be enclosed in matching single "
"quotes (``'``) or double quotes (``\"``).  They can also be enclosed in "
"matching groups of three single or double quotes (these are generally "
"referred to as *triple-quoted strings*). The backslash (``\\``) character is"
" used to give special meaning to otherwise ordinary characters like ``n``, "
"which means 'newline' when escaped (``\\n``). It can also be used to escape "
"characters that otherwise have a special meaning, such as newline, backslash"
" itself, or the quote character. See :ref:`escape sequences <escape-"
"sequences>` below for examples."
msgstr ""

#: ../../reference/lexical_analysis.rst:512
msgid ""
"Bytes literals are always prefixed with ``'b'`` or ``'B'``; they produce an "
"instance of the :class:`bytes` type instead of the :class:`str` type.  They "
"may only contain ASCII characters; bytes with a numeric value of 128 or "
"greater must be expressed with escapes."
msgstr ""

#: ../../reference/lexical_analysis.rst:521
msgid ""
"Both string and bytes literals may optionally be prefixed with a letter "
"``'r'`` or ``'R'``; such constructs are called :dfn:`raw string literals` "
"and :dfn:`raw bytes literals` respectively and treat backslashes as literal "
"characters.  As a result, in raw string literals, ``'\\U'`` and ``'\\u'`` "
"escapes are not treated specially."
msgstr ""

#: ../../reference/lexical_analysis.rst:527
msgid ""
"The ``'rb'`` prefix of raw bytes literals has been added as a synonym of "
"``'br'``."
msgstr ""

#: ../../reference/lexical_analysis.rst:531
msgid ""
"Support for the unicode legacy literal (``u'value'``) was reintroduced to "
"simplify the maintenance of dual Python 2.x and 3.x codebases. See "
":pep:`414` for more information."
msgstr ""

#: ../../reference/lexical_analysis.rst:539
msgid ""
"A string literal with ``'f'`` or ``'F'`` in its prefix is a :dfn:`formatted "
"string literal`; see :ref:`f-strings`.  The ``'f'`` may be combined with "
"``'r'``, but not with ``'b'`` or ``'u'``, therefore raw formatted strings "
"are possible, but formatted bytes literals are not."
msgstr ""

#: ../../reference/lexical_analysis.rst:544
msgid ""
"In triple-quoted literals, unescaped newlines and quotes are allowed (and "
"are retained), except that three unescaped quotes in a row terminate the "
"literal.  (A \"quote\" is the character used to open the literal, i.e. "
"either ``'`` or ``\"``.)"
msgstr ""

#: ../../reference/lexical_analysis.rst:567
msgid "Escape sequences"
msgstr ""

#: ../../reference/lexical_analysis.rst:569
msgid ""
"Unless an ``'r'`` or ``'R'`` prefix is present, escape sequences in string "
"and bytes literals are interpreted according to rules similar to those used "
"by Standard C.  The recognized escape sequences are:"
msgstr ""

#: ../../reference/lexical_analysis.rst:574
#: ../../reference/lexical_analysis.rst:607
msgid "Escape Sequence"
msgstr ""

#: ../../reference/lexical_analysis.rst:574
#: ../../reference/lexical_analysis.rst:607
msgid "Meaning"
msgstr "Artinya"

#: ../../reference/lexical_analysis.rst:574
#: ../../reference/lexical_analysis.rst:607
msgid "Notes"
msgstr "Catatan"

#: ../../reference/lexical_analysis.rst:576
msgid "``\\``\\ <newline>"
msgstr ""

#: ../../reference/lexical_analysis.rst:576
msgid "Backslash and newline ignored"
msgstr ""

#: ../../reference/lexical_analysis.rst:576
msgid "\\(1)"
msgstr "\\(1)"

#: ../../reference/lexical_analysis.rst:578
msgid "``\\\\``"
msgstr ""

#: ../../reference/lexical_analysis.rst:578
msgid "Backslash (``\\``)"
msgstr ""

#: ../../reference/lexical_analysis.rst:580
msgid "``\\'``"
msgstr ""

#: ../../reference/lexical_analysis.rst:580
msgid "Single quote (``'``)"
msgstr ""

#: ../../reference/lexical_analysis.rst:582
msgid "``\\\"``"
msgstr ""

#: ../../reference/lexical_analysis.rst:582
msgid "Double quote (``\"``)"
msgstr ""

#: ../../reference/lexical_analysis.rst:584
msgid "``\\a``"
msgstr ""

#: ../../reference/lexical_analysis.rst:584
msgid "ASCII Bell (BEL)"
msgstr ""

#: ../../reference/lexical_analysis.rst:586
msgid "``\\b``"
msgstr "``\\b``"

#: ../../reference/lexical_analysis.rst:586
msgid "ASCII Backspace (BS)"
msgstr ""

#: ../../reference/lexical_analysis.rst:588
msgid "``\\f``"
msgstr ""

#: ../../reference/lexical_analysis.rst:588
msgid "ASCII Formfeed (FF)"
msgstr ""

#: ../../reference/lexical_analysis.rst:590
msgid "``\\n``"
msgstr "``\\n``"

#: ../../reference/lexical_analysis.rst:590
msgid "ASCII Linefeed (LF)"
msgstr ""

#: ../../reference/lexical_analysis.rst:592
msgid "``\\r``"
msgstr "``\\r``"

#: ../../reference/lexical_analysis.rst:592
msgid "ASCII Carriage Return (CR)"
msgstr ""

#: ../../reference/lexical_analysis.rst:594
msgid "``\\t``"
msgstr ""

#: ../../reference/lexical_analysis.rst:594
msgid "ASCII Horizontal Tab (TAB)"
msgstr ""

#: ../../reference/lexical_analysis.rst:596
msgid "``\\v``"
msgstr ""

#: ../../reference/lexical_analysis.rst:596
msgid "ASCII Vertical Tab (VT)"
msgstr ""

#: ../../reference/lexical_analysis.rst:598
msgid ":samp:`\\\\\\\\{ooo}`"
msgstr ""

#: ../../reference/lexical_analysis.rst:598
msgid "Character with octal value *ooo*"
msgstr ""

#: ../../reference/lexical_analysis.rst:598
msgid "(2,4)"
msgstr ""

#: ../../reference/lexical_analysis.rst:601
msgid ":samp:`\\\\x{hh}`"
msgstr ""

#: ../../reference/lexical_analysis.rst:601
msgid "Character with hex value *hh*"
msgstr ""

#: ../../reference/lexical_analysis.rst:601
msgid "(3,4)"
msgstr ""

#: ../../reference/lexical_analysis.rst:604
msgid "Escape sequences only recognized in string literals are:"
msgstr ""

#: ../../reference/lexical_analysis.rst:609
msgid ":samp:`\\\\N\\\\{{name}\\\\}`"
msgstr ""

#: ../../reference/lexical_analysis.rst:609
msgid "Character named *name* in the Unicode database"
msgstr ""

#: ../../reference/lexical_analysis.rst:609
msgid "\\(5)"
msgstr "\\(5)"

#: ../../reference/lexical_analysis.rst:612
msgid ":samp:`\\\\u{xxxx}`"
msgstr ""

#: ../../reference/lexical_analysis.rst:612
msgid "Character with 16-bit hex value *xxxx*"
msgstr ""

#: ../../reference/lexical_analysis.rst:612
msgid "\\(6)"
msgstr "\\(6)"

#: ../../reference/lexical_analysis.rst:615
msgid ":samp:`\\\\U{xxxxxxxx}`"
msgstr ""

#: ../../reference/lexical_analysis.rst:615
msgid "Character with 32-bit hex value *xxxxxxxx*"
msgstr ""

#: ../../reference/lexical_analysis.rst:615
msgid "\\(7)"
msgstr "\\(7)"

#: ../../reference/lexical_analysis.rst:619
msgid "Notes:"
msgstr "Catatan:"

#: ../../reference/lexical_analysis.rst:622
msgid "A backslash can be added at the end of a line to ignore the newline::"
msgstr ""

#: ../../reference/lexical_analysis.rst:624
msgid ""
">>> 'This string will not include \\\n"
"... backslashes or newline characters.'\n"
"'This string will not include backslashes or newline characters.'"
msgstr ""

#: ../../reference/lexical_analysis.rst:628
msgid ""
"The same result can be achieved using :ref:`triple-quoted strings "
"<strings>`, or parentheses and :ref:`string literal concatenation <string-"
"concatenation>`."
msgstr ""

#: ../../reference/lexical_analysis.rst:633
msgid "As in Standard C, up to three octal digits are accepted."
msgstr ""

#: ../../reference/lexical_analysis.rst:635
msgid ""
"Octal escapes with value larger than ``0o377`` produce a "
":exc:`DeprecationWarning`."
msgstr ""

#: ../../reference/lexical_analysis.rst:639
msgid ""
"Octal escapes with value larger than ``0o377`` produce a "
":exc:`SyntaxWarning`. In a future Python version they will be eventually a "
":exc:`SyntaxError`."
msgstr ""

#: ../../reference/lexical_analysis.rst:645
msgid "Unlike in Standard C, exactly two hex digits are required."
msgstr ""

#: ../../reference/lexical_analysis.rst:648
msgid ""
"In a bytes literal, hexadecimal and octal escapes denote the byte with the "
"given value. In a string literal, these escapes denote a Unicode character "
"with the given value."
msgstr ""

#: ../../reference/lexical_analysis.rst:653
msgid "Support for name aliases [#]_ has been added."
msgstr ""

#: ../../reference/lexical_analysis.rst:657
msgid "Exactly four hex digits are required."
msgstr ""

#: ../../reference/lexical_analysis.rst:660
msgid ""
"Any Unicode character can be encoded this way.  Exactly eight hex digits are"
" required."
msgstr ""

#: ../../reference/lexical_analysis.rst:666
msgid ""
"Unlike Standard C, all unrecognized escape sequences are left in the string "
"unchanged, i.e., *the backslash is left in the result*.  (This behavior is "
"useful when debugging: if an escape sequence is mistyped, the resulting "
"output is more easily recognized as broken.)  It is also important to note "
"that the escape sequences only recognized in string literals fall into the "
"category of unrecognized escapes for bytes literals."
msgstr ""

#: ../../reference/lexical_analysis.rst:673
msgid "Unrecognized escape sequences produce a :exc:`DeprecationWarning`."
msgstr ""

#: ../../reference/lexical_analysis.rst:676
msgid ""
"Unrecognized escape sequences produce a :exc:`SyntaxWarning`. In a future "
"Python version they will be eventually a :exc:`SyntaxError`."
msgstr ""

#: ../../reference/lexical_analysis.rst:680
msgid ""
"Even in a raw literal, quotes can be escaped with a backslash, but the "
"backslash remains in the result; for example, ``r\"\\\"\"`` is a valid "
"string literal consisting of two characters: a backslash and a double quote;"
" ``r\"\\\"`` is not a valid string literal (even a raw string cannot end in "
"an odd number of backslashes).  Specifically, *a raw literal cannot end in a"
" single backslash* (since the backslash would escape the following quote "
"character).  Note also that a single backslash followed by a newline is "
"interpreted as those two characters as part of the literal, *not* as a line "
"continuation."
msgstr ""

#: ../../reference/lexical_analysis.rst:693
msgid "String literal concatenation"
msgstr ""

#: ../../reference/lexical_analysis.rst:695
msgid ""
"Multiple adjacent string or bytes literals (delimited by whitespace), "
"possibly using different quoting conventions, are allowed, and their meaning"
" is the same as their concatenation.  Thus, ``\"hello\" 'world'`` is "
"equivalent to ``\"helloworld\"``.  This feature can be used to reduce the "
"number of backslashes needed, to split long strings conveniently across long"
" lines, or even to add comments to parts of strings, for example::"
msgstr ""

#: ../../reference/lexical_analysis.rst:702
msgid ""
"re.compile(\"[A-Za-z_]\"       # letter or underscore\n"
"           \"[A-Za-z0-9_]*\"   # letter, digit or underscore\n"
"          )"
msgstr ""

#: ../../reference/lexical_analysis.rst:706
msgid ""
"Note that this feature is defined at the syntactical level, but implemented "
"at compile time.  The '+' operator must be used to concatenate string "
"expressions at run time.  Also note that literal concatenation can use "
"different quoting styles for each component (even mixing raw strings and "
"triple quoted strings), and formatted string literals may be concatenated "
"with plain string literals."
msgstr ""

#: ../../reference/lexical_analysis.rst:729
msgid "f-strings"
msgstr ""

#: ../../reference/lexical_analysis.rst:733
msgid ""
"A :dfn:`formatted string literal` or :dfn:`f-string` is a string literal "
"that is prefixed with ``'f'`` or ``'F'``.  These strings may contain "
"replacement fields, which are expressions delimited by curly braces ``{}``. "
"While other string literals always have a constant value, formatted strings "
"are really expressions evaluated at run time."
msgstr ""

#: ../../reference/lexical_analysis.rst:739
msgid ""
"Escape sequences are decoded like in ordinary string literals (except when a"
" literal is also marked as a raw string).  After decoding, the grammar for "
"the contents of the string is:"
msgstr ""

#: ../../reference/lexical_analysis.rst:753
msgid ""
"The parts of the string outside curly braces are treated literally, except "
"that any doubled curly braces ``'{{'`` or ``'}}'`` are replaced with the "
"corresponding single curly brace.  A single opening curly bracket ``'{'`` "
"marks a replacement field, which starts with a Python expression. To display"
" both the expression text and its value after evaluation, (useful in "
"debugging), an equal sign ``'='`` may be added after the expression. A "
"conversion field, introduced by an exclamation point ``'!'`` may follow.  A "
"format specifier may also be appended, introduced by a colon ``':'``. A "
"replacement field ends with a closing curly bracket ``'}'``."
msgstr ""

#: ../../reference/lexical_analysis.rst:763
msgid ""
"Expressions in formatted string literals are treated like regular Python "
"expressions surrounded by parentheses, with a few exceptions. An empty "
"expression is not allowed, and both :keyword:`lambda`  and assignment "
"expressions ``:=`` must be surrounded by explicit parentheses. Each "
"expression is evaluated in the context where the formatted string literal "
"appears, in order from left to right.  Replacement expressions can contain "
"newlines in both single-quoted and triple-quoted f-strings and they can "
"contain comments.  Everything that comes after a ``#`` inside a replacement "
"field is a comment (even closing braces and quotes). In that case, "
"replacement fields must be closed in a different line."
msgstr ""

#: ../../reference/lexical_analysis.rst:774
msgid ""
">>> f\"abc{a # This is a comment }\"\n"
"... + 3}\"\n"
"'abc5'"
msgstr ""

#: ../../reference/lexical_analysis.rst:780
msgid ""
"Prior to Python 3.7, an :keyword:`await` expression and comprehensions "
"containing an :keyword:`async for` clause were illegal in the expressions in"
" formatted string literals due to a problem with the implementation."
msgstr ""

#: ../../reference/lexical_analysis.rst:785
msgid ""
"Prior to Python 3.12, comments were not allowed inside f-string replacement "
"fields."
msgstr ""

#: ../../reference/lexical_analysis.rst:789
msgid ""
"When the equal sign ``'='`` is provided, the output will have the expression"
" text, the ``'='`` and the evaluated value. Spaces after the opening brace "
"``'{'``, within the expression and after the ``'='`` are all retained in the"
" output. By default, the ``'='`` causes the :func:`repr` of the expression "
"to be provided, unless there is a format specified. When a format is "
"specified it defaults to the :func:`str` of the expression unless a "
"conversion ``'!r'`` is declared."
msgstr ""

#: ../../reference/lexical_analysis.rst:797
msgid "The equal sign ``'='``."
msgstr ""

#: ../../reference/lexical_analysis.rst:800
msgid ""
"If a conversion is specified, the result of evaluating the expression is "
"converted before formatting.  Conversion ``'!s'`` calls :func:`str` on the "
"result, ``'!r'`` calls :func:`repr`, and ``'!a'`` calls :func:`ascii`."
msgstr ""

#: ../../reference/lexical_analysis.rst:804
msgid ""
"The result is then formatted using the :func:`format` protocol.  The format "
"specifier is passed to the :meth:`~object.__format__` method of the "
"expression or conversion result.  An empty string is passed when the format "
"specifier is omitted.  The formatted result is then included in the final "
"value of the whole string."
msgstr ""

#: ../../reference/lexical_analysis.rst:810
msgid ""
"Top-level format specifiers may include nested replacement fields. These "
"nested fields may include their own conversion fields and :ref:`format "
"specifiers <formatspec>`, but may not include more deeply nested replacement"
" fields. The :ref:`format specifier mini-language <formatspec>` is the same "
"as that used by the :meth:`str.format` method."
msgstr ""

#: ../../reference/lexical_analysis.rst:816
msgid ""
"Formatted string literals may be concatenated, but replacement fields cannot"
" be split across literals."
msgstr ""

#: ../../reference/lexical_analysis.rst:819
msgid "Some examples of formatted string literals::"
msgstr ""

#: ../../reference/lexical_analysis.rst:821
msgid ""
">>> name = \"Fred\"\n"
">>> f\"He said his name is {name!r}.\"\n"
"\"He said his name is 'Fred'.\"\n"
">>> f\"He said his name is {repr(name)}.\"  # repr() is equivalent to !r\n"
"\"He said his name is 'Fred'.\"\n"
">>> width = 10\n"
">>> precision = 4\n"
">>> value = decimal.Decimal(\"12.34567\")\n"
">>> f\"result: {value:{width}.{precision}}\"  # nested fields\n"
"'result:      12.35'\n"
">>> today = datetime(year=2017, month=1, day=27)\n"
">>> f\"{today:%B %d, %Y}\"  # using date format specifier\n"
"'January 27, 2017'\n"
">>> f\"{today=:%B %d, %Y}\" # using date format specifier and debugging\n"
"'today=January 27, 2017'\n"
">>> number = 1024\n"
">>> f\"{number:#0x}\"  # using integer format specifier\n"
"'0x400'\n"
">>> foo = \"bar\"\n"
">>> f\"{ foo = }\" # preserves whitespace\n"
"\" foo = 'bar'\"\n"
">>> line = \"The mill's closed\"\n"
">>> f\"{line = }\"\n"
"'line = \"The mill\\'s closed\"'\n"
">>> f\"{line = :20}\"\n"
"\"line = The mill's closed   \"\n"
">>> f\"{line = !r:20}\"\n"
"'line = \"The mill\\'s closed\" '"
msgstr ""

#: ../../reference/lexical_analysis.rst:851
msgid ""
"Reusing the outer f-string quoting type inside a replacement field is "
"permitted::"
msgstr ""

#: ../../reference/lexical_analysis.rst:854
msgid ""
">>> a = dict(x=2)\n"
">>> f\"abc {a[\"x\"]} def\"\n"
"'abc 2 def'"
msgstr ""

#: ../../reference/lexical_analysis.rst:858
msgid ""
"Prior to Python 3.12, reuse of the same quoting type of the outer f-string "
"inside a replacement field was not possible."
msgstr ""

#: ../../reference/lexical_analysis.rst:862
msgid ""
"Backslashes are also allowed in replacement fields and are evaluated the "
"same way as in any other context::"
msgstr ""

#: ../../reference/lexical_analysis.rst:865
msgid ""
">>> a = [\"a\", \"b\", \"c\"]\n"
">>> print(f\"List a contains:\\n{\"\\n\".join(a)}\")\n"
"List a contains:\n"
"a\n"
"b\n"
"c"
msgstr ""

#: ../../reference/lexical_analysis.rst:872
msgid ""
"Prior to Python 3.12, backslashes were not permitted inside an f-string "
"replacement field."
msgstr ""

#: ../../reference/lexical_analysis.rst:876
msgid ""
"Formatted string literals cannot be used as docstrings, even if they do not "
"include expressions."
msgstr ""

#: ../../reference/lexical_analysis.rst:881
msgid ""
">>> def foo():\n"
"...     f\"Not a docstring\"\n"
"...\n"
">>> foo.__doc__ is None\n"
"True"
msgstr ""

#: ../../reference/lexical_analysis.rst:887
msgid ""
"See also :pep:`498` for the proposal that added formatted string literals, "
"and :meth:`str.format`, which uses a related format string mechanism."
msgstr ""

#: ../../reference/lexical_analysis.rst:894
msgid "Numeric literals"
msgstr ""

#: ../../reference/lexical_analysis.rst:900
msgid ""
"There are three types of numeric literals: integers, floating-point numbers,"
" and imaginary numbers.  There are no complex literals (complex numbers can "
"be formed by adding a real number and an imaginary number)."
msgstr ""

#: ../../reference/lexical_analysis.rst:904
msgid ""
"Note that numeric literals do not include a sign; a phrase like ``-1`` is "
"actually an expression composed of the unary operator '``-``' and the "
"literal ``1``."
msgstr ""

#: ../../reference/lexical_analysis.rst:918
msgid "Integer literals"
msgstr ""

#: ../../reference/lexical_analysis.rst:920
msgid "Integer literals are described by the following lexical definitions:"
msgstr ""

#: ../../reference/lexical_analysis.rst:934
msgid ""
"There is no limit for the length of integer literals apart from what can be "
"stored in available memory."
msgstr ""

#: ../../reference/lexical_analysis.rst:937
msgid ""
"Underscores are ignored for determining the numeric value of the literal.  "
"They can be used to group digits for enhanced readability.  One underscore "
"can occur between digits, and after base specifiers like ``0x``."
msgstr ""

#: ../../reference/lexical_analysis.rst:941
msgid ""
"Note that leading zeros in a non-zero decimal number are not allowed. This "
"is for disambiguation with C-style octal literals, which Python used before "
"version 3.0."
msgstr ""

#: ../../reference/lexical_analysis.rst:945
msgid "Some examples of integer literals::"
msgstr ""

#: ../../reference/lexical_analysis.rst:947
msgid ""
"7     2147483647                        0o177    0b100110111\n"
"3     79228162514264337593543950336     0o377    0xdeadbeef\n"
"      100_000_000_000                   0b_1110_0101"
msgstr ""

#: ../../reference/lexical_analysis.rst:951
#: ../../reference/lexical_analysis.rst:983
msgid "Underscores are now allowed for grouping purposes in literals."
msgstr ""

#: ../../reference/lexical_analysis.rst:962
msgid "Floating-point literals"
msgstr ""

#: ../../reference/lexical_analysis.rst:964
msgid ""
"Floating-point literals are described by the following lexical definitions:"
msgstr ""

#: ../../reference/lexical_analysis.rst:974
msgid ""
"Note that the integer and exponent parts are always interpreted using radix "
"10. For example, ``077e010`` is legal, and denotes the same number as "
"``77e10``. The allowed range of floating-point literals is implementation-"
"dependent.  As in integer literals, underscores are supported for digit "
"grouping."
msgstr ""

#: ../../reference/lexical_analysis.rst:979
msgid "Some examples of floating-point literals::"
msgstr ""

#: ../../reference/lexical_analysis.rst:981
msgid "3.14    10.    .001    1e100    3.14e-10    0e0    3.14_15_93"
msgstr ""

#: ../../reference/lexical_analysis.rst:992
msgid "Imaginary literals"
msgstr ""

#: ../../reference/lexical_analysis.rst:994
msgid "Imaginary literals are described by the following lexical definitions:"
msgstr ""

#: ../../reference/lexical_analysis.rst:999
msgid ""
"An imaginary literal yields a complex number with a real part of 0.0.  "
"Complex numbers are represented as a pair of floating-point numbers and have"
" the same restrictions on their range.  To create a complex number with a "
"nonzero real part, add a floating-point number to it, e.g., ``(3+4j)``.  "
"Some examples of imaginary literals::"
msgstr ""

#: ../../reference/lexical_analysis.rst:1005
msgid "3.14j   10.j    10j     .001j   1e100j   3.14e-10j   3.14_15_93j"
msgstr ""

#: ../../reference/lexical_analysis.rst:1011
msgid "Operators"
msgstr ""

#: ../../reference/lexical_analysis.rst:1015
msgid "The following tokens are operators:"
msgstr ""

#: ../../reference/lexical_analysis.rst:1017
msgid ""
"+       -       *       **      /       //      %      @\n"
"<<      >>      &       |       ^       ~       :=\n"
"<       >       <=      >=      ==      !="
msgstr ""

#: ../../reference/lexical_analysis.rst:1028
msgid "Delimiters"
msgstr ""

#: ../../reference/lexical_analysis.rst:1032
msgid "The following tokens serve as delimiters in the grammar:"
msgstr ""

#: ../../reference/lexical_analysis.rst:1034
msgid ""
"(       )       [       ]       {       }\n"
",       :       !       .       ;       @       =\n"
"->      +=      -=      *=      /=      //=     %=\n"
"@=      &=      |=      ^=      >>=     <<=     **="
msgstr ""

#: ../../reference/lexical_analysis.rst:1041
msgid ""
"The period can also occur in floating-point and imaginary literals.  A "
"sequence of three periods has a special meaning as an ellipsis literal. The "
"second half of the list, the augmented assignment operators, serve lexically"
" as delimiters, but also perform an operation."
msgstr ""

#: ../../reference/lexical_analysis.rst:1046
msgid ""
"The following printing ASCII characters have special meaning as part of "
"other tokens or are otherwise significant to the lexical analyzer:"
msgstr ""

#: ../../reference/lexical_analysis.rst:1049
msgid "'       \"       #       \\"
msgstr ""

#: ../../reference/lexical_analysis.rst:1053
msgid ""
"The following printing ASCII characters are not used in Python.  Their "
"occurrence outside string literals and comments is an unconditional error:"
msgstr ""

#: ../../reference/lexical_analysis.rst:1056
msgid "$       ?       `"
msgstr ""

#: ../../reference/lexical_analysis.rst:1062
msgid "Footnotes"
msgstr "Catatan kaki"

#: ../../reference/lexical_analysis.rst:1063
msgid "https://www.unicode.org/Public/16.0.0/ucd/NameAliases.txt"
msgstr ""

#: ../../reference/lexical_analysis.rst:8
msgid "lexical analysis"
msgstr ""

#: ../../reference/lexical_analysis.rst:8
msgid "parser"
msgstr ""

#: ../../reference/lexical_analysis.rst:8
msgid "token"
msgstr ""

#: ../../reference/lexical_analysis.rst:26
msgid "line structure"
msgstr ""

#: ../../reference/lexical_analysis.rst:36
msgid "logical line"
msgstr ""

#: ../../reference/lexical_analysis.rst:36
#: ../../reference/lexical_analysis.rst:115
#: ../../reference/lexical_analysis.rst:548
msgid "physical line"
msgstr ""

#: ../../reference/lexical_analysis.rst:36
#: ../../reference/lexical_analysis.rst:115
msgid "line joining"
msgstr ""

#: ../../reference/lexical_analysis.rst:36
msgid "NEWLINE token"
msgstr ""

#: ../../reference/lexical_analysis.rst:68
msgid "comment"
msgstr ""

#: ../../reference/lexical_analysis.rst:68
msgid "hash character"
msgstr ""

#: ../../reference/lexical_analysis.rst:68
#: ../../reference/lexical_analysis.rst:82
msgid "# (hash)"
msgstr ""

#: ../../reference/lexical_analysis.rst:82
msgid "source character set"
msgstr ""

#: ../../reference/lexical_analysis.rst:82
msgid "encoding declarations (source file)"
msgstr ""

#: ../../reference/lexical_analysis.rst:82
msgid "source encoding declaration"
msgstr ""

#: ../../reference/lexical_analysis.rst:115
msgid "line continuation"
msgstr ""

#: ../../reference/lexical_analysis.rst:115
msgid "backslash character"
msgstr ""

#: ../../reference/lexical_analysis.rst:160
msgid "blank line"
msgstr ""

#: ../../reference/lexical_analysis.rst:176
msgid "indentation"
msgstr ""

#: ../../reference/lexical_analysis.rst:176
msgid "leading whitespace"
msgstr ""

#: ../../reference/lexical_analysis.rst:176
msgid "space"
msgstr ""

#: ../../reference/lexical_analysis.rst:176
msgid "tab"
msgstr ""

#: ../../reference/lexical_analysis.rst:176
msgid "grouping"
msgstr ""

#: ../../reference/lexical_analysis.rst:176
msgid "statement grouping"
msgstr ""

#: ../../reference/lexical_analysis.rst:204
msgid "INDENT token"
msgstr ""

#: ../../reference/lexical_analysis.rst:204
msgid "DEDENT token"
msgstr ""

#: ../../reference/lexical_analysis.rst:294
msgid "identifier"
msgstr ""

#: ../../reference/lexical_analysis.rst:294
msgid "name"
msgstr "nama"

#: ../../reference/lexical_analysis.rst:350
#: ../../reference/lexical_analysis.rst:374
msgid "keyword"
msgstr ""

#: ../../reference/lexical_analysis.rst:350
msgid "reserved word"
msgstr ""

#: ../../reference/lexical_analysis.rst:374
msgid "soft keyword"
msgstr ""

#: ../../reference/lexical_analysis.rst:393
msgid "_, identifiers"
msgstr ""

#: ../../reference/lexical_analysis.rst:393
msgid "__, identifiers"
msgstr ""

#: ../../reference/lexical_analysis.rst:449
msgid "literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:449
msgid "constant"
msgstr ""

#: ../../reference/lexical_analysis.rst:454
#: ../../reference/lexical_analysis.rst:495
msgid "string literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:454
#: ../../reference/lexical_analysis.rst:508
msgid "bytes literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:454
msgid "ASCII"
msgstr ""

#: ../../reference/lexical_analysis.rst:454
msgid "' (single quote)"
msgstr ""

#: ../../reference/lexical_analysis.rst:454
msgid "\" (double quote)"
msgstr ""

#: ../../reference/lexical_analysis.rst:454
msgid "u'"
msgstr ""

#: ../../reference/lexical_analysis.rst:454
msgid "u\""
msgstr ""

#: ../../reference/lexical_analysis.rst:495
msgid "triple-quoted string"
msgstr "teks tiga-kutip"

#: ../../reference/lexical_analysis.rst:495
msgid "Unicode Consortium"
msgstr ""

#: ../../reference/lexical_analysis.rst:495
msgid "raw string"
msgstr ""

#: ../../reference/lexical_analysis.rst:495
msgid "\"\"\""
msgstr ""

#: ../../reference/lexical_analysis.rst:495
msgid "'''"
msgstr ""

#: ../../reference/lexical_analysis.rst:508
msgid "b'"
msgstr ""

#: ../../reference/lexical_analysis.rst:508
msgid "b\""
msgstr ""

#: ../../reference/lexical_analysis.rst:517
msgid "r'"
msgstr ""

#: ../../reference/lexical_analysis.rst:517
msgid "raw string literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:517
msgid "r\""
msgstr ""

#: ../../reference/lexical_analysis.rst:535
msgid "f'"
msgstr ""

#: ../../reference/lexical_analysis.rst:535
#: ../../reference/lexical_analysis.rst:713
msgid "formatted string literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:535
msgid "f\""
msgstr ""

#: ../../reference/lexical_analysis.rst:548
msgid "escape sequence"
msgstr ""

#: ../../reference/lexical_analysis.rst:548
msgid "Standard C"
msgstr ""

#: ../../reference/lexical_analysis.rst:548
msgid "C"
msgstr "C"

#: ../../reference/lexical_analysis.rst:548
msgid "\\ (backslash)"
msgstr ""

#: ../../reference/lexical_analysis.rst:548
msgid "\\\\"
msgstr ""

#: ../../reference/lexical_analysis.rst:548
msgid "\\a"
msgstr ""

#: ../../reference/lexical_analysis.rst:548
msgid "\\b"
msgstr ""

#: ../../reference/lexical_analysis.rst:548
msgid "\\f"
msgstr ""

#: ../../reference/lexical_analysis.rst:548
msgid "\\n"
msgstr ""

#: ../../reference/lexical_analysis.rst:548
msgid "\\r"
msgstr ""

#: ../../reference/lexical_analysis.rst:548
msgid "\\t"
msgstr ""

#: ../../reference/lexical_analysis.rst:548
msgid "\\v"
msgstr ""

#: ../../reference/lexical_analysis.rst:548
msgid "\\x"
msgstr ""

#: ../../reference/lexical_analysis.rst:548
msgid "\\u"
msgstr ""

#: ../../reference/lexical_analysis.rst:548
msgid "\\U"
msgstr ""

#: ../../reference/lexical_analysis.rst:664
msgid "unrecognized escape sequence"
msgstr ""

#: ../../reference/lexical_analysis.rst:713
msgid "interpolated string literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:713
msgid "string"
msgstr "string"

#: ../../reference/lexical_analysis.rst:713
msgid "formatted literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:713
msgid "interpolated literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:713
msgid "f-string"
msgstr "f-string"

#: ../../reference/lexical_analysis.rst:713
msgid "fstring"
msgstr "fstring"

#: ../../reference/lexical_analysis.rst:713
msgid "{} (curly brackets)"
msgstr ""

#: ../../reference/lexical_analysis.rst:713
msgid "in formatted string literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:713
msgid "! (exclamation)"
msgstr ""

#: ../../reference/lexical_analysis.rst:713
msgid ": (colon)"
msgstr ""

#: ../../reference/lexical_analysis.rst:713
msgid "= (equals)"
msgstr ""

#: ../../reference/lexical_analysis.rst:713
msgid "for help in debugging using string literals"
msgstr ""

#: ../../reference/lexical_analysis.rst:896
msgid "number"
msgstr "number"

#: ../../reference/lexical_analysis.rst:896
msgid "numeric literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:896
#: ../../reference/lexical_analysis.rst:909
msgid "integer literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:896
msgid "floating-point literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:896
msgid "hexadecimal literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:896
msgid "octal literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:896
msgid "binary literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:896
msgid "decimal literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:896
msgid "imaginary literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:896
msgid "complex literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:909
msgid "0b"
msgstr ""

#: ../../reference/lexical_analysis.rst:909
msgid "0o"
msgstr ""

#: ../../reference/lexical_analysis.rst:909
msgid "0x"
msgstr ""

#: ../../reference/lexical_analysis.rst:909
#: ../../reference/lexical_analysis.rst:955
msgid "_ (underscore)"
msgstr ""

#: ../../reference/lexical_analysis.rst:909
#: ../../reference/lexical_analysis.rst:955
#: ../../reference/lexical_analysis.rst:987
msgid "in numeric literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:955
msgid ". (dot)"
msgstr ""

#: ../../reference/lexical_analysis.rst:955
msgid "e"
msgstr ""

#: ../../reference/lexical_analysis.rst:987
msgid "j"
msgstr ""

#: ../../reference/lexical_analysis.rst:1013
msgid "operators"
msgstr ""

#: ../../reference/lexical_analysis.rst:1030
msgid "delimiters"
msgstr ""
