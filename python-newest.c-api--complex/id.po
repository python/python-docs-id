# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Aulia Widyaputra <aulia.widyaputra@gmail.com>, 2021
# oon arfiandwi <oon.arfiandwi@gmail.com>, 2023
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-09 14:19+0000\n"
"PO-Revision-Date: 2021-06-28 00:48+0000\n"
"Last-Translator: oon arfiandwi <oon.arfiandwi@gmail.com>, 2023\n"
"Language-Team: Indonesian (https://app.transifex.com/python-doc/teams/5390/id/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: id\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/complex.rst:6
msgid "Complex Number Objects"
msgstr "Objek Bilangan Kompleks"

#: ../../c-api/complex.rst:10
msgid ""
"Python's complex number objects are implemented as two distinct types when "
"viewed from the C API:  one is the Python object exposed to Python programs,"
" and the other is a C structure which represents the actual complex number "
"value. The API provides functions for working with both."
msgstr ""
"Objek Bilangan Kompleks Python memiliki dua tipe implementasi berbeda jika "
"dilihat dari API Bahasa C: pertama adalah objek Python yang terekspos ke "
"program-program Python, dan yang kedua adalah struktur C  yang "
"merepresentasikan nilai bilangan kompleks sebenarnya. API tersebut "
"memberikan fungsi-fungsi untuk bekerja dengan kedua tipe implementasi."

#: ../../c-api/complex.rst:17
msgid "Complex Numbers as C Structures"
msgstr "Bilangan Kompleks sebagai Struktur C"

#: ../../c-api/complex.rst:19
msgid ""
"Note that the functions which accept these structures as parameters and "
"return them as results do so *by value* rather than dereferencing them "
"through pointers.  This is consistent throughout the API."
msgstr ""

#: ../../c-api/complex.rst:26
msgid ""
"The C structure which corresponds to the value portion of a Python complex "
"number object.  Most of the functions for dealing with complex number "
"objects use structures of this type as input or output values, as "
"appropriate."
msgstr ""

#: ../../c-api/complex.rst:33
msgid "The structure is defined as::"
msgstr ""

#: ../../c-api/complex.rst:35
msgid ""
"typedef struct {\n"
"    double real;\n"
"    double imag;\n"
"} Py_complex;"
msgstr ""

#: ../../c-api/complex.rst:43
msgid ""
"Return the sum of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""

#: ../../c-api/complex.rst:49
msgid ""
"Return the difference between two complex numbers, using the C "
":c:type:`Py_complex` representation."
msgstr ""

#: ../../c-api/complex.rst:55
msgid ""
"Return the negation of the complex number *num*, using the C "
":c:type:`Py_complex` representation."
msgstr ""

#: ../../c-api/complex.rst:61
msgid ""
"Return the product of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr ""

#: ../../c-api/complex.rst:67
msgid ""
"Return the quotient of two complex numbers, using the C :c:type:`Py_complex`"
" representation."
msgstr ""

#: ../../c-api/complex.rst:70
msgid ""
"If *divisor* is null, this method returns zero and sets :c:data:`errno` to "
":c:macro:`!EDOM`."
msgstr ""

#: ../../c-api/complex.rst:76
msgid ""
"Return the exponentiation of *num* by *exp*, using the C "
":c:type:`Py_complex` representation."
msgstr ""

#: ../../c-api/complex.rst:79
msgid ""
"If *num* is null and *exp* is not a positive real number, this method "
"returns zero and sets :c:data:`errno` to :c:macro:`!EDOM`."
msgstr ""

#: ../../c-api/complex.rst:82
msgid "Set :c:data:`errno` to :c:macro:`!ERANGE` on overflows."
msgstr ""

#: ../../c-api/complex.rst:86
msgid "Complex Numbers as Python Objects"
msgstr ""

#: ../../c-api/complex.rst:91
msgid ""
"This subtype of :c:type:`PyObject` represents a Python complex number "
"object."
msgstr ""

#: ../../c-api/complex.rst:96
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python complex number"
" type. It is the same object as :class:`complex` in the Python layer."
msgstr ""

#: ../../c-api/complex.rst:102
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject` or a subtype of "
":c:type:`PyComplexObject`.  This function always succeeds."
msgstr ""

#: ../../c-api/complex.rst:108
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject`, but not a "
"subtype of :c:type:`PyComplexObject`.  This function always succeeds."
msgstr ""

#: ../../c-api/complex.rst:114
msgid ""
"Create a new Python complex number object from a C :c:type:`Py_complex` "
"value. Return ``NULL`` with an exception set on error."
msgstr ""

#: ../../c-api/complex.rst:120
msgid ""
"Return a new :c:type:`PyComplexObject` object from *real* and *imag*. Return"
" ``NULL`` with an exception set on error."
msgstr ""

#: ../../c-api/complex.rst:126
msgid "Return the real part of *op* as a C :c:expr:`double`."
msgstr ""

#: ../../c-api/complex.rst:128
msgid ""
"If *op* is not a Python complex number object but has a "
":meth:`~object.__complex__` method, this method will first be called to "
"convert *op* to a Python complex number object.  If :meth:`!__complex__` is "
"not defined then it falls back to call :c:func:`PyFloat_AsDouble` and "
"returns its result."
msgstr ""

#: ../../c-api/complex.rst:134 ../../c-api/complex.rst:150
msgid ""
"Upon failure, this method returns ``-1.0`` with an exception set, so one "
"should call :c:func:`PyErr_Occurred` to check for errors."
msgstr ""

#: ../../c-api/complex.rst:137 ../../c-api/complex.rst:153
msgid "Use :meth:`~object.__complex__` if available."
msgstr ""

#: ../../c-api/complex.rst:142
msgid "Return the imaginary part of *op* as a C :c:expr:`double`."
msgstr ""

#: ../../c-api/complex.rst:144
msgid ""
"If *op* is not a Python complex number object but has a "
":meth:`~object.__complex__` method, this method will first be called to "
"convert *op* to a Python complex number object.  If :meth:`!__complex__` is "
"not defined then it falls back to call :c:func:`PyFloat_AsDouble` and "
"returns ``0.0`` on success."
msgstr ""

#: ../../c-api/complex.rst:158
msgid "Return the :c:type:`Py_complex` value of the complex number *op*."
msgstr ""

#: ../../c-api/complex.rst:160
msgid ""
"If *op* is not a Python complex number object but has a "
":meth:`~object.__complex__` method, this method will first be called to "
"convert *op* to a Python complex number object.  If :meth:`!__complex__` is "
"not defined then it falls back to :meth:`~object.__float__`.  If "
":meth:`!__float__` is not defined then it falls back to "
":meth:`~object.__index__`."
msgstr ""

#: ../../c-api/complex.rst:166
msgid ""
"Upon failure, this method returns :c:type:`Py_complex` with "
":c:member:`~Py_complex.real` set to ``-1.0`` and with an exception set, so "
"one should call :c:func:`PyErr_Occurred` to check for errors."
msgstr ""

#: ../../c-api/complex.rst:170
msgid "Use :meth:`~object.__index__` if available."
msgstr ""

#: ../../c-api/complex.rst:8
msgid "object"
msgstr "objek"

#: ../../c-api/complex.rst:8
msgid "complex number"
msgstr "bilangan kompleks"
